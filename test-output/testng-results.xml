<?xml version="1.0" encoding="UTF-8"?>
<testng-results ignored="0" total="149" passed="138" failed="11" skipped="0">
  <reporter-output>
  </reporter-output>
  <suite started-at="2020-05-19T13:27:20 WIB" name="APISuite" finished-at="2020-05-19T13:32:28 WIB" duration-ms="307752">
    <groups>
    </groups>
    <test started-at="2020-05-19T13:27:20 WIB" name="APITest" finished-at="2020-05-19T13:32:28 WIB" duration-ms="307752">
      <class name="com.api.testcases.TS_006_InsertPayment">
        <test-method is-config="true" signature="setUp()[pri:0, instance:com.api.testcases.TS_006_InsertPayment@72cde7cc]" started-at="2020-05-19T13:29:51 WIB" name="setUp" finished-at="2020-05-19T13:29:51 WIB" duration-ms="2" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method is-config="true" signature="firstLogMessage()[pri:0, instance:com.api.testcases.TS_006_InsertPayment@72cde7cc]" started-at="2020-05-19T13:29:51 WIB" name="firstLogMessage" finished-at="2020-05-19T13:29:51 WIB" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- firstLogMessage -->
        <test-method signature="createBillData(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String)[pri:0, instance:com.api.testcases.TS_006_InsertPayment@72cde7cc]" started-at="2020-05-19T13:29:51 WIB" name="createBillData" data-provider="createBill-data" finished-at="2020-05-19T13:29:53 WIB" duration-ms="1488" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[Ridwan Remin]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[02111111111]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[May]]>
              </value>
            </param>
            <param index="3">
              <value>
                <![CDATA[75000]]>
              </value>
            </param>
            <param index="4">
              <value>
                <![CDATA[unpaid]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- createBillData -->
        <test-method signature="createBillData(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String)[pri:0, instance:com.api.testcases.TS_006_InsertPayment@72cde7cc]" started-at="2020-05-19T13:29:53 WIB" name="createBillData" data-provider="createBill-data" finished-at="2020-05-19T13:29:54 WIB" duration-ms="1420" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[Dodit Mulyanto]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[02122222222]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[May]]>
              </value>
            </param>
            <param index="3">
              <value>
                <![CDATA[75000]]>
              </value>
            </param>
            <param index="4">
              <value>
                <![CDATA[unpaid]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- createBillData -->
        <test-method signature="createBillData(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String)[pri:0, instance:com.api.testcases.TS_006_InsertPayment@72cde7cc]" started-at="2020-05-19T13:29:54 WIB" name="createBillData" data-provider="createBill-data" finished-at="2020-05-19T13:29:56 WIB" duration-ms="1454" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[Raditya Dika]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[02133333333]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[May]]>
              </value>
            </param>
            <param index="3">
              <value>
                <![CDATA[75000]]>
              </value>
            </param>
            <param index="4">
              <value>
                <![CDATA[unpaid]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- createBillData -->
        <test-method signature="createBillData(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String)[pri:0, instance:com.api.testcases.TS_006_InsertPayment@72cde7cc]" started-at="2020-05-19T13:29:56 WIB" name="createBillData" data-provider="createBill-data" finished-at="2020-05-19T13:29:57 WIB" duration-ms="1421" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[Bintang Emon]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[02144444444]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[May]]>
              </value>
            </param>
            <param index="3">
              <value>
                <![CDATA[75000]]>
              </value>
            </param>
            <param index="4">
              <value>
                <![CDATA[unpaid]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- createBillData -->
        <test-method signature="createBillData(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String)[pri:0, instance:com.api.testcases.TS_006_InsertPayment@72cde7cc]" started-at="2020-05-19T13:29:57 WIB" name="createBillData" data-provider="createBill-data" finished-at="2020-05-19T13:29:58 WIB" duration-ms="1510" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[Fico fahriza]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[02155555555]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[May]]>
              </value>
            </param>
            <param index="3">
              <value>
                <![CDATA[75000]]>
              </value>
            </param>
            <param index="4">
              <value>
                <![CDATA[unpaid]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- createBillData -->
        <test-method signature="createBillData(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String)[pri:0, instance:com.api.testcases.TS_006_InsertPayment@72cde7cc]" started-at="2020-05-19T13:29:58 WIB" name="createBillData" data-provider="createBill-data" finished-at="2020-05-19T13:30:00 WIB" duration-ms="1512" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[Yuda Aldiansyah]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[02166666666]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[May]]>
              </value>
            </param>
            <param index="3">
              <value>
                <![CDATA[75000]]>
              </value>
            </param>
            <param index="4">
              <value>
                <![CDATA[unpaid]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- createBillData -->
        <test-method signature="insertPaymentTest(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String)[pri:0, instance:com.api.testcases.TS_006_InsertPayment@72cde7cc]" started-at="2020-05-19T13:30:01 WIB" name="insertPaymentTest" data-provider="getInsertPayment-data" finished-at="2020-05-19T13:30:04 WIB" depends-on-methods="com.api.testcases.TS_006_InsertPayment.createBillData" duration-ms="3280" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[TS_084]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[Test Insert Payment API with positive test path (pay with wallet balance)]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[Depend#83833833834]]>
              </value>
            </param>
            <param index="3">
              <value>
                <![CDATA[Depend#02111111111]]>
              </value>
            </param>
            <param index="4">
              <value>
                <![CDATA[1]]>
              </value>
            </param>
            <param index="5">
              <value>
                <![CDATA[1000000]]>
              </value>
            </param>
            <param index="6">
              <value>
                <![CDATA[201]]>
              </value>
            </param>
            <param index="7">
              <value>
                <![CDATA[Payment Pending]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- insertPaymentTest -->
        <test-method signature="insertPaymentTest(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String)[pri:0, instance:com.api.testcases.TS_006_InsertPayment@72cde7cc]" started-at="2020-05-19T13:30:04 WIB" name="insertPaymentTest" data-provider="getInsertPayment-data" finished-at="2020-05-19T13:30:07 WIB" depends-on-methods="com.api.testcases.TS_006_InsertPayment.createBillData" duration-ms="2934" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[TS_085]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[Test Insert Payment API with positive test path (pay with wallet bank transfer)]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[Depend#83833833834]]>
              </value>
            </param>
            <param index="3">
              <value>
                <![CDATA[Depend#02122222222]]>
              </value>
            </param>
            <param index="4">
              <value>
                <![CDATA[2]]>
              </value>
            </param>
            <param index="5">
              <value>
                <![CDATA[1000000]]>
              </value>
            </param>
            <param index="6">
              <value>
                <![CDATA[201]]>
              </value>
            </param>
            <param index="7">
              <value>
                <![CDATA[Payment Pending]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- insertPaymentTest -->
        <test-method signature="insertPaymentTest(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String)[pri:0, instance:com.api.testcases.TS_006_InsertPayment@72cde7cc]" started-at="2020-05-19T13:30:07 WIB" name="insertPaymentTest" data-provider="getInsertPayment-data" finished-at="2020-05-19T13:30:11 WIB" depends-on-methods="com.api.testcases.TS_006_InsertPayment.createBillData" duration-ms="3708" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[TS_086]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[Test Insert Payment API with unrecognized payment method]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[Depend#83833833834]]>
              </value>
            </param>
            <param index="3">
              <value>
                <![CDATA[Depend#02133333333]]>
              </value>
            </param>
            <param index="4">
              <value>
                <![CDATA[500]]>
              </value>
            </param>
            <param index="5">
              <value>
                <![CDATA[1000000]]>
              </value>
            </param>
            <param index="6">
              <value>
                <![CDATA[404]]>
              </value>
            </param>
            <param index="7">
              <value>
                <![CDATA[Payment method not found]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- insertPaymentTest -->
        <test-method signature="insertPaymentTest(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String)[pri:0, instance:com.api.testcases.TS_006_InsertPayment@72cde7cc]" started-at="2020-05-19T13:30:11 WIB" name="insertPaymentTest" data-provider="getInsertPayment-data" finished-at="2020-05-19T13:30:14 WIB" depends-on-methods="com.api.testcases.TS_006_InsertPayment.createBillData" duration-ms="3032" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[TS_087]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[Test Insert Payment API with unregistered bill]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[Depend#83833833834]]>
              </value>
            </param>
            <param index="3">
              <value>
                <![CDATA[1000]]>
              </value>
            </param>
            <param index="4">
              <value>
                <![CDATA[1]]>
              </value>
            </param>
            <param index="5">
              <value>
                <![CDATA[1000000]]>
              </value>
            </param>
            <param index="6">
              <value>
                <![CDATA[404]]>
              </value>
            </param>
            <param index="7">
              <value>
                <![CDATA[Bill not found]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- insertPaymentTest -->
        <test-method signature="insertPaymentTest(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String)[pri:0, instance:com.api.testcases.TS_006_InsertPayment@72cde7cc]" started-at="2020-05-19T13:30:14 WIB" name="insertPaymentTest" data-provider="getInsertPayment-data" finished-at="2020-05-19T13:30:15 WIB" depends-on-methods="com.api.testcases.TS_006_InsertPayment.createBillData" duration-ms="1425" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[TS_088]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[Test Insert Payment API with unregistered user]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[1000]]>
              </value>
            </param>
            <param index="3">
              <value>
                <![CDATA[Depend#02133333333]]>
              </value>
            </param>
            <param index="4">
              <value>
                <![CDATA[1]]>
              </value>
            </param>
            <param index="5">
              <value>
                <![CDATA[1000000]]>
              </value>
            </param>
            <param index="6">
              <value>
                <![CDATA[404]]>
              </value>
            </param>
            <param index="7">
              <value>
                <![CDATA[User not found]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- insertPaymentTest -->
        <test-method signature="insertPaymentTest(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String)[pri:0, instance:com.api.testcases.TS_006_InsertPayment@72cde7cc]" started-at="2020-05-19T13:30:15 WIB" name="insertPaymentTest" data-provider="getInsertPayment-data" finished-at="2020-05-19T13:30:18 WIB" depends-on-methods="com.api.testcases.TS_006_InsertPayment.createBillData" duration-ms="3211" status="FAIL">
          <params>
            <param index="0">
              <value>
                <![CDATA[TS_089]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[Test Insert Payment API if user already insert payment (method : wallet balance)]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[Depend#83833833834]]>
              </value>
            </param>
            <param index="3">
              <value>
                <![CDATA[Depend#02111111111]]>
              </value>
            </param>
            <param index="4">
              <value>
                <![CDATA[1]]>
              </value>
            </param>
            <param index="5">
              <value>
                <![CDATA[1000000]]>
              </value>
            </param>
            <param index="6">
              <value>
                <![CDATA[403]]>
              </value>
            </param>
            <param index="7">
              <value>
                <![CDATA[Pay your bill to finish the transaction]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[1 expectation failed.
Response body doesn't match expectation.
Expected: a string containing "Pay your bill to finish the transaction"
  Actual: [data:[:], message:Pay your bill to finish the transaction, status:403]
]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: 1 expectation failed.
Response body doesn't match expectation.
Expected: a string containing "Pay your bill to finish the transaction"
  Actual: [data:[:], message:Pay your bill to finish the transaction, status:403]

at java.base/jdk.internal.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)
at java.base/jdk.internal.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62)
at java.base/jdk.internal.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
at java.base/java.lang.reflect.Constructor.newInstance(Constructor.java:490)
at org.codehaus.groovy.reflection.CachedConstructor.invoke(CachedConstructor.java:83)
at org.codehaus.groovy.reflection.CachedConstructor.doConstructorInvoke(CachedConstructor.java:77)
at org.codehaus.groovy.runtime.callsite.ConstructorSite$ConstructorSiteNoUnwrap.callConstructor(ConstructorSite.java:84)
at org.codehaus.groovy.runtime.callsite.AbstractCallSite.callConstructor(AbstractCallSite.java:250)
at io.restassured.internal.ResponseSpecificationImpl$HamcrestAssertionClosure.validate(ResponseSpecificationImpl.groovy:494)
at io.restassured.internal.ResponseSpecificationImpl$HamcrestAssertionClosure$validate$1.call(Unknown Source)
at io.restassured.internal.ResponseSpecificationImpl.validateResponseIfRequired(ResponseSpecificationImpl.groovy:656)
at jdk.internal.reflect.GeneratedMethodAccessor31.invoke(Unknown Source)
at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.base/java.lang.reflect.Method.invoke(Method.java:566)
at org.codehaus.groovy.runtime.callsite.PogoMetaMethodSite$PogoCachedMethodSiteNoUnwrapNoCoerce.invoke(PogoMetaMethodSite.java:210)
at org.codehaus.groovy.runtime.callsite.PogoMetaMethodSite.callCurrent(PogoMetaMethodSite.java:59)
at org.codehaus.groovy.runtime.callsite.AbstractCallSite.callCurrent(AbstractCallSite.java:169)
at io.restassured.internal.ResponseSpecificationImpl.content(ResponseSpecificationImpl.groovy:97)
at io.restassured.internal.ValidatableResponseOptionsImpl.content(ValidatableResponseOptionsImpl.java:89)
at com.api.testcases.TS_006_InsertPayment.insertPaymentTest(TS_006_InsertPayment.java:113)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.base/java.lang.reflect.Method.invoke(Method.java:566)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:134)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:597)
at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:173)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:816)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:146)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1540)
at org.testng.TestRunner.privateRun(TestRunner.java:766)
at org.testng.TestRunner.run(TestRunner.java:587)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:384)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:378)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:337)
at org.testng.SuiteRunner.run(SuiteRunner.java:286)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1187)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1109)
at org.testng.TestNG.runSuites(TestNG.java:1039)
at org.testng.TestNG.run(TestNG.java:1007)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- insertPaymentTest -->
        <test-method signature="insertPaymentTest(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String)[pri:0, instance:com.api.testcases.TS_006_InsertPayment@72cde7cc]" started-at="2020-05-19T13:30:18 WIB" name="insertPaymentTest" data-provider="getInsertPayment-data" finished-at="2020-05-19T13:30:21 WIB" depends-on-methods="com.api.testcases.TS_006_InsertPayment.createBillData" duration-ms="2894" status="FAIL">
          <params>
            <param index="0">
              <value>
                <![CDATA[TS_090]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[Test Insert Payment API if user already insert payment (method : bank transfer)]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[Depend#83833833834]]>
              </value>
            </param>
            <param index="3">
              <value>
                <![CDATA[Depend#02122222222]]>
              </value>
            </param>
            <param index="4">
              <value>
                <![CDATA[2]]>
              </value>
            </param>
            <param index="5">
              <value>
                <![CDATA[1000000]]>
              </value>
            </param>
            <param index="6">
              <value>
                <![CDATA[403]]>
              </value>
            </param>
            <param index="7">
              <value>
                <![CDATA[Pay your bill to finish the transaction]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[1 expectation failed.
Response body doesn't match expectation.
Expected: a string containing "Pay your bill to finish the transaction"
  Actual: [data:[:], message:Pay your bill to finish the transaction, status:403]
]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: 1 expectation failed.
Response body doesn't match expectation.
Expected: a string containing "Pay your bill to finish the transaction"
  Actual: [data:[:], message:Pay your bill to finish the transaction, status:403]

at java.base/jdk.internal.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)
at java.base/jdk.internal.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62)
at java.base/jdk.internal.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
at java.base/java.lang.reflect.Constructor.newInstance(Constructor.java:490)
at org.codehaus.groovy.reflection.CachedConstructor.invoke(CachedConstructor.java:83)
at org.codehaus.groovy.reflection.CachedConstructor.doConstructorInvoke(CachedConstructor.java:77)
at org.codehaus.groovy.runtime.callsite.ConstructorSite$ConstructorSiteNoUnwrap.callConstructor(ConstructorSite.java:84)
at org.codehaus.groovy.runtime.callsite.AbstractCallSite.callConstructor(AbstractCallSite.java:250)
at io.restassured.internal.ResponseSpecificationImpl$HamcrestAssertionClosure.validate(ResponseSpecificationImpl.groovy:494)
at io.restassured.internal.ResponseSpecificationImpl$HamcrestAssertionClosure$validate$1.call(Unknown Source)
at io.restassured.internal.ResponseSpecificationImpl.validateResponseIfRequired(ResponseSpecificationImpl.groovy:656)
at jdk.internal.reflect.GeneratedMethodAccessor31.invoke(Unknown Source)
at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.base/java.lang.reflect.Method.invoke(Method.java:566)
at org.codehaus.groovy.runtime.callsite.PogoMetaMethodSite$PogoCachedMethodSiteNoUnwrapNoCoerce.invoke(PogoMetaMethodSite.java:210)
at org.codehaus.groovy.runtime.callsite.PogoMetaMethodSite.callCurrent(PogoMetaMethodSite.java:59)
at org.codehaus.groovy.runtime.callsite.AbstractCallSite.callCurrent(AbstractCallSite.java:169)
at io.restassured.internal.ResponseSpecificationImpl.content(ResponseSpecificationImpl.groovy:97)
at io.restassured.internal.ValidatableResponseOptionsImpl.content(ValidatableResponseOptionsImpl.java:89)
at com.api.testcases.TS_006_InsertPayment.insertPaymentTest(TS_006_InsertPayment.java:113)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.base/java.lang.reflect.Method.invoke(Method.java:566)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:134)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:597)
at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:173)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:816)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:146)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1540)
at org.testng.TestRunner.privateRun(TestRunner.java:766)
at org.testng.TestRunner.run(TestRunner.java:587)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:384)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:378)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:337)
at org.testng.SuiteRunner.run(SuiteRunner.java:286)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1187)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1109)
at org.testng.TestNG.runSuites(TestNG.java:1039)
at org.testng.TestNG.run(TestNG.java:1007)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- insertPaymentTest -->
        <test-method signature="insertPaymentTest(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String)[pri:0, instance:com.api.testcases.TS_006_InsertPayment@72cde7cc]" started-at="2020-05-19T13:30:21 WIB" name="insertPaymentTest" data-provider="getInsertPayment-data" finished-at="2020-05-19T13:30:24 WIB" depends-on-methods="com.api.testcases.TS_006_InsertPayment.createBillData" duration-ms="2904" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[TS_091]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[Test Insert Payment API if wallet balance less than total amount billing]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[Depend#83833833834]]>
              </value>
            </param>
            <param index="3">
              <value>
                <![CDATA[Depend#02133333333]]>
              </value>
            </param>
            <param index="4">
              <value>
                <![CDATA[1]]>
              </value>
            </param>
            <param index="5">
              <value>
                <![CDATA[40000]]>
              </value>
            </param>
            <param index="6">
              <value>
                <![CDATA[403]]>
              </value>
            </param>
            <param index="7">
              <value>
                <![CDATA[Insufficient balance please top up]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- insertPaymentTest -->
        <test-method signature="insertPaymentTest(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String)[pri:0, instance:com.api.testcases.TS_006_InsertPayment@72cde7cc]" started-at="2020-05-19T13:30:24 WIB" name="insertPaymentTest" data-provider="getInsertPayment-data" finished-at="2020-05-19T13:30:27 WIB" depends-on-methods="com.api.testcases.TS_006_InsertPayment.createBillData" duration-ms="2875" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[TS_092]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[Test Insert Payment API if wallet balance equals zero]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[Depend#83833833834]]>
              </value>
            </param>
            <param index="3">
              <value>
                <![CDATA[Depend#02133333333]]>
              </value>
            </param>
            <param index="4">
              <value>
                <![CDATA[1]]>
              </value>
            </param>
            <param index="5">
              <value>
                <![CDATA[0]]>
              </value>
            </param>
            <param index="6">
              <value>
                <![CDATA[403]]>
              </value>
            </param>
            <param index="7">
              <value>
                <![CDATA[Insufficient balance please top up]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- insertPaymentTest -->
        <test-method signature="insertPaymentTest(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String)[pri:0, instance:com.api.testcases.TS_006_InsertPayment@72cde7cc]" started-at="2020-05-19T13:30:27 WIB" name="insertPaymentTest" data-provider="getInsertPayment-data" finished-at="2020-05-19T13:30:30 WIB" depends-on-methods="com.api.testcases.TS_006_InsertPayment.createBillData" duration-ms="3176" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[TS_093]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[Test Insert Payment API with invalid payment method (contain alphabet)]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[Depend#83833833834]]>
              </value>
            </param>
            <param index="3">
              <value>
                <![CDATA[Depend#02133333333]]>
              </value>
            </param>
            <param index="4">
              <value>
                <![CDATA[abc]]>
              </value>
            </param>
            <param index="5">
              <value>
                <![CDATA[1000000]]>
              </value>
            </param>
            <param index="6">
              <value>
                <![CDATA[400]]>
              </value>
            </param>
            <param index="7">
              <value>
                <![CDATA[JSON parse error]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- insertPaymentTest -->
        <test-method signature="insertPaymentTest(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String)[pri:0, instance:com.api.testcases.TS_006_InsertPayment@72cde7cc]" started-at="2020-05-19T13:30:30 WIB" name="insertPaymentTest" data-provider="getInsertPayment-data" finished-at="2020-05-19T13:30:33 WIB" depends-on-methods="com.api.testcases.TS_006_InsertPayment.createBillData" duration-ms="2859" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[TS_094]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[Test Insert Payment API with invalid payment method (contain symbol)]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[Depend#83833833834]]>
              </value>
            </param>
            <param index="3">
              <value>
                <![CDATA[Depend#02133333333]]>
              </value>
            </param>
            <param index="4">
              <value>
                <![CDATA[@]]>
              </value>
            </param>
            <param index="5">
              <value>
                <![CDATA[1000000]]>
              </value>
            </param>
            <param index="6">
              <value>
                <![CDATA[400]]>
              </value>
            </param>
            <param index="7">
              <value>
                <![CDATA[JSON parse error]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- insertPaymentTest -->
        <test-method signature="insertPaymentTest(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String)[pri:0, instance:com.api.testcases.TS_006_InsertPayment@72cde7cc]" started-at="2020-05-19T13:30:33 WIB" name="insertPaymentTest" data-provider="getInsertPayment-data" finished-at="2020-05-19T13:30:36 WIB" depends-on-methods="com.api.testcases.TS_006_InsertPayment.createBillData" duration-ms="2889" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[TS_095]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[Test Insert Payment API with invalid payment method (empty)]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[Depend#83833833834]]>
              </value>
            </param>
            <param index="3">
              <value>
                <![CDATA[Depend#02133333333]]>
              </value>
            </param>
            <param index="4">
              <value>
                <![CDATA[]]>
              </value>
            </param>
            <param index="5">
              <value>
                <![CDATA[1000000]]>
              </value>
            </param>
            <param index="6">
              <value>
                <![CDATA[404]]>
              </value>
            </param>
            <param index="7">
              <value>
                <![CDATA[Payment method not found]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- insertPaymentTest -->
        <test-method signature="insertPaymentTest(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String)[pri:0, instance:com.api.testcases.TS_006_InsertPayment@72cde7cc]" started-at="2020-05-19T13:30:36 WIB" name="insertPaymentTest" data-provider="getInsertPayment-data" finished-at="2020-05-19T13:30:39 WIB" depends-on-methods="com.api.testcases.TS_006_InsertPayment.createBillData" duration-ms="2864" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[TS_096]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[Test Insert Payment API with invalid id bill (contain alphabet)]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[Depend#83833833834]]>
              </value>
            </param>
            <param index="3">
              <value>
                <![CDATA[abc]]>
              </value>
            </param>
            <param index="4">
              <value>
                <![CDATA[2]]>
              </value>
            </param>
            <param index="5">
              <value>
                <![CDATA[1000000]]>
              </value>
            </param>
            <param index="6">
              <value>
                <![CDATA[400]]>
              </value>
            </param>
            <param index="7">
              <value>
                <![CDATA[JSON parse error]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- insertPaymentTest -->
        <test-method signature="insertPaymentTest(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String)[pri:0, instance:com.api.testcases.TS_006_InsertPayment@72cde7cc]" started-at="2020-05-19T13:30:39 WIB" name="insertPaymentTest" data-provider="getInsertPayment-data" finished-at="2020-05-19T13:30:42 WIB" depends-on-methods="com.api.testcases.TS_006_InsertPayment.createBillData" duration-ms="2918" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[TS_097]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[Test Insert Payment API with invalid id bill (contain symbol)]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[Depend#83833833834]]>
              </value>
            </param>
            <param index="3">
              <value>
                <![CDATA[@]]>
              </value>
            </param>
            <param index="4">
              <value>
                <![CDATA[2]]>
              </value>
            </param>
            <param index="5">
              <value>
                <![CDATA[1000000]]>
              </value>
            </param>
            <param index="6">
              <value>
                <![CDATA[400]]>
              </value>
            </param>
            <param index="7">
              <value>
                <![CDATA[JSON parse error]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- insertPaymentTest -->
        <test-method signature="insertPaymentTest(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String)[pri:0, instance:com.api.testcases.TS_006_InsertPayment@72cde7cc]" started-at="2020-05-19T13:30:42 WIB" name="insertPaymentTest" data-provider="getInsertPayment-data" finished-at="2020-05-19T13:30:45 WIB" depends-on-methods="com.api.testcases.TS_006_InsertPayment.createBillData" duration-ms="2888" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[TS_098]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[Test Insert Payment API with invalid id bill (empty)]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[Depend#83833833834]]>
              </value>
            </param>
            <param index="3">
              <value>
                <![CDATA[]]>
              </value>
            </param>
            <param index="4">
              <value>
                <![CDATA[2]]>
              </value>
            </param>
            <param index="5">
              <value>
                <![CDATA[1000000]]>
              </value>
            </param>
            <param index="6">
              <value>
                <![CDATA[404]]>
              </value>
            </param>
            <param index="7">
              <value>
                <![CDATA[Bill not found]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- insertPaymentTest -->
        <test-method signature="insertPaymentTest(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String)[pri:0, instance:com.api.testcases.TS_006_InsertPayment@72cde7cc]" started-at="2020-05-19T13:30:45 WIB" name="insertPaymentTest" data-provider="getInsertPayment-data" finished-at="2020-05-19T13:30:46 WIB" depends-on-methods="com.api.testcases.TS_006_InsertPayment.createBillData" duration-ms="1437" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[TS_099]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[Test Insert Payment API with invalid id user(contain alphabet)]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[abc]]>
              </value>
            </param>
            <param index="3">
              <value>
                <![CDATA[Depend#02133333333]]>
              </value>
            </param>
            <param index="4">
              <value>
                <![CDATA[2]]>
              </value>
            </param>
            <param index="5">
              <value>
                <![CDATA[1000000]]>
              </value>
            </param>
            <param index="6">
              <value>
                <![CDATA[400]]>
              </value>
            </param>
            <param index="7">
              <value>
                <![CDATA[JSON parse error]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- insertPaymentTest -->
        <test-method signature="insertPaymentTest(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String)[pri:0, instance:com.api.testcases.TS_006_InsertPayment@72cde7cc]" started-at="2020-05-19T13:30:46 WIB" name="insertPaymentTest" data-provider="getInsertPayment-data" finished-at="2020-05-19T13:30:47 WIB" depends-on-methods="com.api.testcases.TS_006_InsertPayment.createBillData" duration-ms="1442" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[TS_100]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[Test Insert Payment API with invalid id user (contain symbol)]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[@]]>
              </value>
            </param>
            <param index="3">
              <value>
                <![CDATA[Depend#02133333333]]>
              </value>
            </param>
            <param index="4">
              <value>
                <![CDATA[2]]>
              </value>
            </param>
            <param index="5">
              <value>
                <![CDATA[1000000]]>
              </value>
            </param>
            <param index="6">
              <value>
                <![CDATA[400]]>
              </value>
            </param>
            <param index="7">
              <value>
                <![CDATA[JSON parse error]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- insertPaymentTest -->
        <test-method signature="insertPaymentTest(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String)[pri:0, instance:com.api.testcases.TS_006_InsertPayment@72cde7cc]" started-at="2020-05-19T13:30:47 WIB" name="insertPaymentTest" data-provider="getInsertPayment-data" finished-at="2020-05-19T13:30:50 WIB" depends-on-methods="com.api.testcases.TS_006_InsertPayment.createBillData" duration-ms="2164" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[TS_101]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[Test Insert Payment API with invalid id user (empty)]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[]]>
              </value>
            </param>
            <param index="3">
              <value>
                <![CDATA[Depend#02133333333]]>
              </value>
            </param>
            <param index="4">
              <value>
                <![CDATA[2]]>
              </value>
            </param>
            <param index="5">
              <value>
                <![CDATA[1000000]]>
              </value>
            </param>
            <param index="6">
              <value>
                <![CDATA[404]]>
              </value>
            </param>
            <param index="7">
              <value>
                <![CDATA[User not found]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- insertPaymentTest -->
      </class> <!-- com.api.testcases.TS_006_InsertPayment -->
      <class name="com.api.testcases.TS_008_GetUserPaymentHistory">
        <test-method is-config="true" signature="setUp()[pri:0, instance:com.api.testcases.TS_008_GetUserPaymentHistory@696da30b]" started-at="2020-05-19T13:31:30 WIB" name="setUp" finished-at="2020-05-19T13:31:30 WIB" duration-ms="3" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method is-config="true" signature="firstLogMessage()[pri:0, instance:com.api.testcases.TS_008_GetUserPaymentHistory@696da30b]" started-at="2020-05-19T13:31:30 WIB" name="firstLogMessage" finished-at="2020-05-19T13:31:30 WIB" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- firstLogMessage -->
        <test-method signature="getProfileTest(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String)[pri:0, instance:com.api.testcases.TS_008_GetUserPaymentHistory@696da30b]" started-at="2020-05-19T13:31:30 WIB" name="getProfileTest" data-provider="getUserPaymentHistory-data" finished-at="2020-05-19T13:31:32 WIB" duration-ms="1785" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[TC_118]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[Test Get User Payment History API if user exist]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[Depend#83833833834]]>
              </value>
            </param>
            <param index="3">
              <value>
                <![CDATA[Success]]>
              </value>
            </param>
            <param index="4">
              <value>
                <![CDATA[200]]>
              </value>
            </param>
            <param index="5">
              <value>
                <![CDATA[Payment history has successfully sent]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getProfileTest -->
        <test-method signature="getProfileTest(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String)[pri:0, instance:com.api.testcases.TS_008_GetUserPaymentHistory@696da30b]" started-at="2020-05-19T13:31:32 WIB" name="getProfileTest" data-provider="getUserPaymentHistory-data" finished-at="2020-05-19T13:31:33 WIB" duration-ms="1417" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[TC_119]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[Test Get User Payment History if user not exist]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[1000]]>
              </value>
            </param>
            <param index="3">
              <value>
                <![CDATA[Fail]]>
              </value>
            </param>
            <param index="4">
              <value>
                <![CDATA[404]]>
              </value>
            </param>
            <param index="5">
              <value>
                <![CDATA[Payment not found]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getProfileTest -->
        <test-method signature="getProfileTest(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String)[pri:0, instance:com.api.testcases.TS_008_GetUserPaymentHistory@696da30b]" started-at="2020-05-19T13:31:33 WIB" name="getProfileTest" data-provider="getUserPaymentHistory-data" finished-at="2020-05-19T13:31:35 WIB" duration-ms="1489" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[TC_120]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[Test Get User Payment History API with invalid user id (contain alphabet)]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[a]]>
              </value>
            </param>
            <param index="3">
              <value>
                <![CDATA[Fail]]>
              </value>
            </param>
            <param index="4">
              <value>
                <![CDATA[400]]>
              </value>
            </param>
            <param index="5">
              <value>
                <![CDATA[JSON parse error]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getProfileTest -->
        <test-method signature="getProfileTest(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String)[pri:0, instance:com.api.testcases.TS_008_GetUserPaymentHistory@696da30b]" started-at="2020-05-19T13:31:35 WIB" name="getProfileTest" data-provider="getUserPaymentHistory-data" finished-at="2020-05-19T13:31:36 WIB" duration-ms="1450" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[TC_121]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[Test Get User Payment History API with invalid user id (contain symbol)]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[@]]>
              </value>
            </param>
            <param index="3">
              <value>
                <![CDATA[Fail]]>
              </value>
            </param>
            <param index="4">
              <value>
                <![CDATA[400]]>
              </value>
            </param>
            <param index="5">
              <value>
                <![CDATA[JSON parse error]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getProfileTest -->
        <test-method signature="getProfileTest(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String)[pri:0, instance:com.api.testcases.TS_008_GetUserPaymentHistory@696da30b]" started-at="2020-05-19T13:31:36 WIB" name="getProfileTest" data-provider="getUserPaymentHistory-data" finished-at="2020-05-19T13:31:39 WIB" duration-ms="2863" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[TC_122]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[Test Get User Payment History API with invalid user id (empty)]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[]]>
              </value>
            </param>
            <param index="3">
              <value>
                <![CDATA[Fail]]>
              </value>
            </param>
            <param index="4">
              <value>
                <![CDATA[404]]>
              </value>
            </param>
            <param index="5">
              <value>
                <![CDATA[Payment not found]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getProfileTest -->
      </class> <!-- com.api.testcases.TS_008_GetUserPaymentHistory -->
      <class name="com.api.testcases.TS_007_VerifyPayment">
        <test-method is-config="true" signature="setUp()[pri:0, instance:com.api.testcases.TS_007_VerifyPayment@5fd4f8f5]" started-at="2020-05-19T13:30:50 WIB" name="setUp" finished-at="2020-05-19T13:30:50 WIB" duration-ms="2" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method is-config="true" signature="firstLogMessage()[pri:0, instance:com.api.testcases.TS_007_VerifyPayment@5fd4f8f5]" started-at="2020-05-19T13:30:50 WIB" name="firstLogMessage" finished-at="2020-05-19T13:30:50 WIB" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- firstLogMessage -->
        <test-method signature="createBillData(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String)[pri:0, instance:com.api.testcases.TS_007_VerifyPayment@5fd4f8f5]" started-at="2020-05-19T13:30:50 WIB" name="createBillData" data-provider="createBill-data" finished-at="2020-05-19T13:30:51 WIB" duration-ms="1425" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[Ridwan Remin]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[02411111111]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[May]]>
              </value>
            </param>
            <param index="3">
              <value>
                <![CDATA[75000]]>
              </value>
            </param>
            <param index="4">
              <value>
                <![CDATA[unpaid]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- createBillData -->
        <test-method signature="createBillData(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String)[pri:0, instance:com.api.testcases.TS_007_VerifyPayment@5fd4f8f5]" started-at="2020-05-19T13:30:51 WIB" name="createBillData" data-provider="createBill-data" finished-at="2020-05-19T13:30:53 WIB" duration-ms="1434" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[Dodit Mulyanto]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[02422222222]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[May]]>
              </value>
            </param>
            <param index="3">
              <value>
                <![CDATA[75000]]>
              </value>
            </param>
            <param index="4">
              <value>
                <![CDATA[unpaid]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- createBillData -->
        <test-method signature="createBillData(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String)[pri:0, instance:com.api.testcases.TS_007_VerifyPayment@5fd4f8f5]" started-at="2020-05-19T13:30:53 WIB" name="createBillData" data-provider="createBill-data" finished-at="2020-05-19T13:30:54 WIB" duration-ms="1450" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[Raditya Dika]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[02433333333]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[May]]>
              </value>
            </param>
            <param index="3">
              <value>
                <![CDATA[75000]]>
              </value>
            </param>
            <param index="4">
              <value>
                <![CDATA[unpaid]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- createBillData -->
        <test-method signature="createBillData(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String)[pri:0, instance:com.api.testcases.TS_007_VerifyPayment@5fd4f8f5]" started-at="2020-05-19T13:30:54 WIB" name="createBillData" data-provider="createBill-data" finished-at="2020-05-19T13:30:56 WIB" duration-ms="1791" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[Bintang Emon]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[02444444444]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[May]]>
              </value>
            </param>
            <param index="3">
              <value>
                <![CDATA[75000]]>
              </value>
            </param>
            <param index="4">
              <value>
                <![CDATA[unpaid]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- createBillData -->
        <test-method signature="createBillData(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String)[pri:0, instance:com.api.testcases.TS_007_VerifyPayment@5fd4f8f5]" started-at="2020-05-19T13:30:56 WIB" name="createBillData" data-provider="createBill-data" finished-at="2020-05-19T13:30:57 WIB" duration-ms="1453" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[Fico fahriza]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[02455555555]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[May]]>
              </value>
            </param>
            <param index="3">
              <value>
                <![CDATA[75000]]>
              </value>
            </param>
            <param index="4">
              <value>
                <![CDATA[unpaid]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- createBillData -->
        <test-method signature="createBillData(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String)[pri:0, instance:com.api.testcases.TS_007_VerifyPayment@5fd4f8f5]" started-at="2020-05-19T13:30:57 WIB" name="createBillData" data-provider="createBill-data" finished-at="2020-05-19T13:30:59 WIB" duration-ms="1477" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[Yuda Aldiansyah]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[02466666666]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[May]]>
              </value>
            </param>
            <param index="3">
              <value>
                <![CDATA[75000]]>
              </value>
            </param>
            <param index="4">
              <value>
                <![CDATA[unpaid]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- createBillData -->
        <test-method signature="insertSomePayment()[pri:0, instance:com.api.testcases.TS_007_VerifyPayment@5fd4f8f5]" started-at="2020-05-19T13:30:59 WIB" name="insertSomePayment" finished-at="2020-05-19T13:31:05 WIB" depends-on-methods="com.api.testcases.TS_007_VerifyPayment.createBillData" duration-ms="6109" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- insertSomePayment -->
        <test-method signature="verifyPaymentTest(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String)[pri:0, instance:com.api.testcases.TS_007_VerifyPayment@5fd4f8f5]" started-at="2020-05-19T13:31:05 WIB" name="verifyPaymentTest" data-provider="verifyPayment-data" finished-at="2020-05-19T13:31:07 WIB" depends-on-methods="com.api.testcases.TS_007_VerifyPayment.insertSomePayment" duration-ms="1564" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[TS_102]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[Test Verify Payment API with positive test path (pay with wallet balance)]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[Depend#83833833834]]>
              </value>
            </param>
            <param index="3">
              <value>
                <![CDATA[Depend#02411111111]]>
              </value>
            </param>
            <param index="4">
              <value>
                <![CDATA[1]]>
              </value>
            </param>
            <param index="5">
              <value>
                <![CDATA[200]]>
              </value>
            </param>
            <param index="6">
              <value>
                <![CDATA[Payment success]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyPaymentTest -->
        <test-method signature="verifyPaymentTest(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String)[pri:0, instance:com.api.testcases.TS_007_VerifyPayment@5fd4f8f5]" started-at="2020-05-19T13:31:07 WIB" name="verifyPaymentTest" data-provider="verifyPayment-data" finished-at="2020-05-19T13:31:08 WIB" depends-on-methods="com.api.testcases.TS_007_VerifyPayment.insertSomePayment" duration-ms="1744" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[TS_103]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[Test Verify Payment API with positive test path (pay with wallet bank transfer)]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[Depend#83833833834]]>
              </value>
            </param>
            <param index="3">
              <value>
                <![CDATA[Depend#02422222222]]>
              </value>
            </param>
            <param index="4">
              <value>
                <![CDATA[2]]>
              </value>
            </param>
            <param index="5">
              <value>
                <![CDATA[200]]>
              </value>
            </param>
            <param index="6">
              <value>
                <![CDATA[Payment success]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyPaymentTest -->
        <test-method signature="verifyPaymentTest(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String)[pri:0, instance:com.api.testcases.TS_007_VerifyPayment@5fd4f8f5]" started-at="2020-05-19T13:31:08 WIB" name="verifyPaymentTest" data-provider="verifyPayment-data" finished-at="2020-05-19T13:31:10 WIB" depends-on-methods="com.api.testcases.TS_007_VerifyPayment.insertSomePayment" duration-ms="1434" status="FAIL">
          <params>
            <param index="0">
              <value>
                <![CDATA[TS_104]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[Test Verify Payment API if user not insert payment first (payment method : wallet balance)]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[Depend#83833833834]]>
              </value>
            </param>
            <param index="3">
              <value>
                <![CDATA[Depend#02444444444]]>
              </value>
            </param>
            <param index="4">
              <value>
                <![CDATA[1]]>
              </value>
            </param>
            <param index="5">
              <value>
                <![CDATA[403]]>
              </value>
            </param>
            <param index="6">
              <value>
                <![CDATA[You must do the payment transaction first]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[1 expectation failed.
Response body doesn't match expectation.
Expected: a string containing "You must do the payment transaction first"
  Actual: [data:[:], message:You must do the payment transaction first, status:403]
]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: 1 expectation failed.
Response body doesn't match expectation.
Expected: a string containing "You must do the payment transaction first"
  Actual: [data:[:], message:You must do the payment transaction first, status:403]

at java.base/jdk.internal.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)
at java.base/jdk.internal.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62)
at java.base/jdk.internal.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
at java.base/java.lang.reflect.Constructor.newInstance(Constructor.java:490)
at org.codehaus.groovy.reflection.CachedConstructor.invoke(CachedConstructor.java:83)
at org.codehaus.groovy.reflection.CachedConstructor.doConstructorInvoke(CachedConstructor.java:77)
at org.codehaus.groovy.runtime.callsite.ConstructorSite$ConstructorSiteNoUnwrap.callConstructor(ConstructorSite.java:84)
at org.codehaus.groovy.runtime.callsite.AbstractCallSite.callConstructor(AbstractCallSite.java:250)
at io.restassured.internal.ResponseSpecificationImpl$HamcrestAssertionClosure.validate(ResponseSpecificationImpl.groovy:494)
at io.restassured.internal.ResponseSpecificationImpl$HamcrestAssertionClosure$validate$1.call(Unknown Source)
at io.restassured.internal.ResponseSpecificationImpl.validateResponseIfRequired(ResponseSpecificationImpl.groovy:656)
at jdk.internal.reflect.GeneratedMethodAccessor31.invoke(Unknown Source)
at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.base/java.lang.reflect.Method.invoke(Method.java:566)
at org.codehaus.groovy.runtime.callsite.PogoMetaMethodSite$PogoCachedMethodSiteNoUnwrapNoCoerce.invoke(PogoMetaMethodSite.java:210)
at org.codehaus.groovy.runtime.callsite.PogoMetaMethodSite.callCurrent(PogoMetaMethodSite.java:59)
at org.codehaus.groovy.runtime.callsite.AbstractCallSite.callCurrent(AbstractCallSite.java:169)
at io.restassured.internal.ResponseSpecificationImpl.content(ResponseSpecificationImpl.groovy:97)
at io.restassured.internal.ValidatableResponseOptionsImpl.content(ValidatableResponseOptionsImpl.java:89)
at com.api.testcases.TS_007_VerifyPayment.verifyPaymentTest(TS_007_VerifyPayment.java:122)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.base/java.lang.reflect.Method.invoke(Method.java:566)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:134)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:597)
at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:173)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:816)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:146)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1540)
at org.testng.TestRunner.privateRun(TestRunner.java:766)
at org.testng.TestRunner.run(TestRunner.java:587)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:384)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:378)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:337)
at org.testng.SuiteRunner.run(SuiteRunner.java:286)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1187)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1109)
at org.testng.TestNG.runSuites(TestNG.java:1039)
at org.testng.TestNG.run(TestNG.java:1007)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyPaymentTest -->
        <test-method signature="verifyPaymentTest(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String)[pri:0, instance:com.api.testcases.TS_007_VerifyPayment@5fd4f8f5]" started-at="2020-05-19T13:31:10 WIB" name="verifyPaymentTest" data-provider="verifyPayment-data" finished-at="2020-05-19T13:31:11 WIB" depends-on-methods="com.api.testcases.TS_007_VerifyPayment.insertSomePayment" duration-ms="1504" status="FAIL">
          <params>
            <param index="0">
              <value>
                <![CDATA[TS_105]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[Test Verify Payment API if user not insert payment first (payment method : bank transfer)]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[Depend#83833833834]]>
              </value>
            </param>
            <param index="3">
              <value>
                <![CDATA[Depend#02455555555]]>
              </value>
            </param>
            <param index="4">
              <value>
                <![CDATA[2]]>
              </value>
            </param>
            <param index="5">
              <value>
                <![CDATA[403]]>
              </value>
            </param>
            <param index="6">
              <value>
                <![CDATA[You must do the payment transaction first]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[1 expectation failed.
Response body doesn't match expectation.
Expected: a string containing "You must do the payment transaction first"
  Actual: [data:[:], message:You must do the payment transaction first, status:403]
]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: 1 expectation failed.
Response body doesn't match expectation.
Expected: a string containing "You must do the payment transaction first"
  Actual: [data:[:], message:You must do the payment transaction first, status:403]

at java.base/jdk.internal.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)
at java.base/jdk.internal.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62)
at java.base/jdk.internal.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
at java.base/java.lang.reflect.Constructor.newInstance(Constructor.java:490)
at org.codehaus.groovy.reflection.CachedConstructor.invoke(CachedConstructor.java:83)
at org.codehaus.groovy.reflection.CachedConstructor.doConstructorInvoke(CachedConstructor.java:77)
at org.codehaus.groovy.runtime.callsite.ConstructorSite$ConstructorSiteNoUnwrap.callConstructor(ConstructorSite.java:84)
at org.codehaus.groovy.runtime.callsite.AbstractCallSite.callConstructor(AbstractCallSite.java:250)
at io.restassured.internal.ResponseSpecificationImpl$HamcrestAssertionClosure.validate(ResponseSpecificationImpl.groovy:494)
at io.restassured.internal.ResponseSpecificationImpl$HamcrestAssertionClosure$validate$1.call(Unknown Source)
at io.restassured.internal.ResponseSpecificationImpl.validateResponseIfRequired(ResponseSpecificationImpl.groovy:656)
at jdk.internal.reflect.GeneratedMethodAccessor31.invoke(Unknown Source)
at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.base/java.lang.reflect.Method.invoke(Method.java:566)
at org.codehaus.groovy.runtime.callsite.PogoMetaMethodSite$PogoCachedMethodSiteNoUnwrapNoCoerce.invoke(PogoMetaMethodSite.java:210)
at org.codehaus.groovy.runtime.callsite.PogoMetaMethodSite.callCurrent(PogoMetaMethodSite.java:59)
at org.codehaus.groovy.runtime.callsite.AbstractCallSite.callCurrent(AbstractCallSite.java:169)
at io.restassured.internal.ResponseSpecificationImpl.content(ResponseSpecificationImpl.groovy:97)
at io.restassured.internal.ValidatableResponseOptionsImpl.content(ValidatableResponseOptionsImpl.java:89)
at com.api.testcases.TS_007_VerifyPayment.verifyPaymentTest(TS_007_VerifyPayment.java:122)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.base/java.lang.reflect.Method.invoke(Method.java:566)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:134)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:597)
at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:173)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:816)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:146)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1540)
at org.testng.TestRunner.privateRun(TestRunner.java:766)
at org.testng.TestRunner.run(TestRunner.java:587)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:384)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:378)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:337)
at org.testng.SuiteRunner.run(SuiteRunner.java:286)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1187)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1109)
at org.testng.TestNG.runSuites(TestNG.java:1039)
at org.testng.TestNG.run(TestNG.java:1007)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyPaymentTest -->
        <test-method signature="verifyPaymentTest(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String)[pri:0, instance:com.api.testcases.TS_007_VerifyPayment@5fd4f8f5]" started-at="2020-05-19T13:31:11 WIB" name="verifyPaymentTest" data-provider="verifyPayment-data" finished-at="2020-05-19T13:31:13 WIB" depends-on-methods="com.api.testcases.TS_007_VerifyPayment.insertSomePayment" duration-ms="1430" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[TS_106]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[Test Verify Payment API with unrecognized payment method]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[Depend#83833833834]]>
              </value>
            </param>
            <param index="3">
              <value>
                <![CDATA[Depend#02433333333]]>
              </value>
            </param>
            <param index="4">
              <value>
                <![CDATA[500]]>
              </value>
            </param>
            <param index="5">
              <value>
                <![CDATA[404]]>
              </value>
            </param>
            <param index="6">
              <value>
                <![CDATA[Payment method not found]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyPaymentTest -->
        <test-method signature="verifyPaymentTest(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String)[pri:0, instance:com.api.testcases.TS_007_VerifyPayment@5fd4f8f5]" started-at="2020-05-19T13:31:13 WIB" name="verifyPaymentTest" data-provider="verifyPayment-data" finished-at="2020-05-19T13:31:14 WIB" depends-on-methods="com.api.testcases.TS_007_VerifyPayment.insertSomePayment" duration-ms="1486" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[TS_107]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[Test Verify Payment API with unregistered bill]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[Depend#83833833834]]>
              </value>
            </param>
            <param index="3">
              <value>
                <![CDATA[1000]]>
              </value>
            </param>
            <param index="4">
              <value>
                <![CDATA[1]]>
              </value>
            </param>
            <param index="5">
              <value>
                <![CDATA[404]]>
              </value>
            </param>
            <param index="6">
              <value>
                <![CDATA[Bill not found]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyPaymentTest -->
        <test-method signature="verifyPaymentTest(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String)[pri:0, instance:com.api.testcases.TS_007_VerifyPayment@5fd4f8f5]" started-at="2020-05-19T13:31:14 WIB" name="verifyPaymentTest" data-provider="verifyPayment-data" finished-at="2020-05-19T13:31:16 WIB" depends-on-methods="com.api.testcases.TS_007_VerifyPayment.insertSomePayment" duration-ms="1808" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[TS_108]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[Test Verify Payment API with unregistered user]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[1000]]>
              </value>
            </param>
            <param index="3">
              <value>
                <![CDATA[Depend#02433333333]]>
              </value>
            </param>
            <param index="4">
              <value>
                <![CDATA[2]]>
              </value>
            </param>
            <param index="5">
              <value>
                <![CDATA[404]]>
              </value>
            </param>
            <param index="6">
              <value>
                <![CDATA[User not found]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyPaymentTest -->
        <test-method signature="verifyPaymentTest(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String)[pri:0, instance:com.api.testcases.TS_007_VerifyPayment@5fd4f8f5]" started-at="2020-05-19T13:31:16 WIB" name="verifyPaymentTest" data-provider="verifyPayment-data" finished-at="2020-05-19T13:31:18 WIB" depends-on-methods="com.api.testcases.TS_007_VerifyPayment.insertSomePayment" duration-ms="1422" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[TS_109]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[Test Verify Payment API with invalid payment method (contain alphabet)]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[Depend#83833833834]]>
              </value>
            </param>
            <param index="3">
              <value>
                <![CDATA[Depend#02433333333]]>
              </value>
            </param>
            <param index="4">
              <value>
                <![CDATA[abc]]>
              </value>
            </param>
            <param index="5">
              <value>
                <![CDATA[400]]>
              </value>
            </param>
            <param index="6">
              <value>
                <![CDATA[JSON parse error]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyPaymentTest -->
        <test-method signature="verifyPaymentTest(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String)[pri:0, instance:com.api.testcases.TS_007_VerifyPayment@5fd4f8f5]" started-at="2020-05-19T13:31:18 WIB" name="verifyPaymentTest" data-provider="verifyPayment-data" finished-at="2020-05-19T13:31:19 WIB" depends-on-methods="com.api.testcases.TS_007_VerifyPayment.insertSomePayment" duration-ms="1407" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[TS_110]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[Test Verify Payment API with invalid payment method (contain symbol)]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[Depend#83833833834]]>
              </value>
            </param>
            <param index="3">
              <value>
                <![CDATA[Depend#02433333333]]>
              </value>
            </param>
            <param index="4">
              <value>
                <![CDATA[@]]>
              </value>
            </param>
            <param index="5">
              <value>
                <![CDATA[400]]>
              </value>
            </param>
            <param index="6">
              <value>
                <![CDATA[JSON parse error]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyPaymentTest -->
        <test-method signature="verifyPaymentTest(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String)[pri:0, instance:com.api.testcases.TS_007_VerifyPayment@5fd4f8f5]" started-at="2020-05-19T13:31:19 WIB" name="verifyPaymentTest" data-provider="verifyPayment-data" finished-at="2020-05-19T13:31:21 WIB" depends-on-methods="com.api.testcases.TS_007_VerifyPayment.insertSomePayment" duration-ms="1961" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[TS_111]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[Test Verify Payment API with invalid payment method (empty)]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[Depend#83833833834]]>
              </value>
            </param>
            <param index="3">
              <value>
                <![CDATA[Depend#02433333333]]>
              </value>
            </param>
            <param index="4">
              <value>
                <![CDATA[]]>
              </value>
            </param>
            <param index="5">
              <value>
                <![CDATA[404]]>
              </value>
            </param>
            <param index="6">
              <value>
                <![CDATA[Payment method not found]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyPaymentTest -->
        <test-method signature="verifyPaymentTest(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String)[pri:0, instance:com.api.testcases.TS_007_VerifyPayment@5fd4f8f5]" started-at="2020-05-19T13:31:21 WIB" name="verifyPaymentTest" data-provider="verifyPayment-data" finished-at="2020-05-19T13:31:23 WIB" depends-on-methods="com.api.testcases.TS_007_VerifyPayment.insertSomePayment" duration-ms="1758" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[TS_112]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[Test Verify Payment API with invalid id bill (contain alphabet)]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[Depend#83833833834]]>
              </value>
            </param>
            <param index="3">
              <value>
                <![CDATA[abc]]>
              </value>
            </param>
            <param index="4">
              <value>
                <![CDATA[2]]>
              </value>
            </param>
            <param index="5">
              <value>
                <![CDATA[400]]>
              </value>
            </param>
            <param index="6">
              <value>
                <![CDATA[JSON parse error]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyPaymentTest -->
        <test-method signature="verifyPaymentTest(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String)[pri:0, instance:com.api.testcases.TS_007_VerifyPayment@5fd4f8f5]" started-at="2020-05-19T13:31:23 WIB" name="verifyPaymentTest" data-provider="verifyPayment-data" finished-at="2020-05-19T13:31:24 WIB" depends-on-methods="com.api.testcases.TS_007_VerifyPayment.insertSomePayment" duration-ms="1435" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[TS_113]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[Test Verify Payment API with invalid id bill (contain symbol)]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[Depend#83833833834]]>
              </value>
            </param>
            <param index="3">
              <value>
                <![CDATA[@]]>
              </value>
            </param>
            <param index="4">
              <value>
                <![CDATA[2]]>
              </value>
            </param>
            <param index="5">
              <value>
                <![CDATA[400]]>
              </value>
            </param>
            <param index="6">
              <value>
                <![CDATA[JSON parse error]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyPaymentTest -->
        <test-method signature="verifyPaymentTest(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String)[pri:0, instance:com.api.testcases.TS_007_VerifyPayment@5fd4f8f5]" started-at="2020-05-19T13:31:24 WIB" name="verifyPaymentTest" data-provider="verifyPayment-data" finished-at="2020-05-19T13:31:26 WIB" depends-on-methods="com.api.testcases.TS_007_VerifyPayment.insertSomePayment" duration-ms="1462" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[TS_114]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[Test Verify Payment API with invalid id bill (empty)]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[Depend#83833833834]]>
              </value>
            </param>
            <param index="3">
              <value>
                <![CDATA[]]>
              </value>
            </param>
            <param index="4">
              <value>
                <![CDATA[2]]>
              </value>
            </param>
            <param index="5">
              <value>
                <![CDATA[404]]>
              </value>
            </param>
            <param index="6">
              <value>
                <![CDATA[Bill not found]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyPaymentTest -->
        <test-method signature="verifyPaymentTest(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String)[pri:0, instance:com.api.testcases.TS_007_VerifyPayment@5fd4f8f5]" started-at="2020-05-19T13:31:26 WIB" name="verifyPaymentTest" data-provider="verifyPayment-data" finished-at="2020-05-19T13:31:27 WIB" depends-on-methods="com.api.testcases.TS_007_VerifyPayment.insertSomePayment" duration-ms="1608" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[TS_115]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[Test Verify Payment API with invalid id user (contain alphabet)]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[abc]]>
              </value>
            </param>
            <param index="3">
              <value>
                <![CDATA[Depend#02433333333]]>
              </value>
            </param>
            <param index="4">
              <value>
                <![CDATA[2]]>
              </value>
            </param>
            <param index="5">
              <value>
                <![CDATA[400]]>
              </value>
            </param>
            <param index="6">
              <value>
                <![CDATA[JSON parse error]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyPaymentTest -->
        <test-method signature="verifyPaymentTest(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String)[pri:0, instance:com.api.testcases.TS_007_VerifyPayment@5fd4f8f5]" started-at="2020-05-19T13:31:27 WIB" name="verifyPaymentTest" data-provider="verifyPayment-data" finished-at="2020-05-19T13:31:29 WIB" depends-on-methods="com.api.testcases.TS_007_VerifyPayment.insertSomePayment" duration-ms="1466" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[TS_116]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[Test Verify Payment API with invalid id user (contain symbol)]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[@]]>
              </value>
            </param>
            <param index="3">
              <value>
                <![CDATA[Depend#02433333333]]>
              </value>
            </param>
            <param index="4">
              <value>
                <![CDATA[2]]>
              </value>
            </param>
            <param index="5">
              <value>
                <![CDATA[400]]>
              </value>
            </param>
            <param index="6">
              <value>
                <![CDATA[JSON parse error]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyPaymentTest -->
        <test-method signature="verifyPaymentTest(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String)[pri:0, instance:com.api.testcases.TS_007_VerifyPayment@5fd4f8f5]" started-at="2020-05-19T13:31:29 WIB" name="verifyPaymentTest" data-provider="verifyPayment-data" finished-at="2020-05-19T13:31:30 WIB" depends-on-methods="com.api.testcases.TS_007_VerifyPayment.insertSomePayment" duration-ms="1429" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[TS_117]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[Test Verify Payment API with invalid id user (empty)]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[]]>
              </value>
            </param>
            <param index="3">
              <value>
                <![CDATA[Depend#02433333333]]>
              </value>
            </param>
            <param index="4">
              <value>
                <![CDATA[2]]>
              </value>
            </param>
            <param index="5">
              <value>
                <![CDATA[404]]>
              </value>
            </param>
            <param index="6">
              <value>
                <![CDATA[User not found]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyPaymentTest -->
      </class> <!-- com.api.testcases.TS_007_VerifyPayment -->
      <class name="com.api.testcases.TS_001_CreateAccount">
        <test-method is-config="true" signature="setUp()[pri:0, instance:com.api.testcases.TS_001_CreateAccount@11bd0f3b]" started-at="2020-05-19T13:27:20 WIB" name="setUp" finished-at="2020-05-19T13:27:20 WIB" duration-ms="28" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method is-config="true" signature="firstLogMessage()[pri:0, instance:com.api.testcases.TS_001_CreateAccount@11bd0f3b]" started-at="2020-05-19T13:27:20 WIB" name="firstLogMessage" finished-at="2020-05-19T13:27:20 WIB" duration-ms="3" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- firstLogMessage -->
        <test-method signature="createAccountTest(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String)[pri:0, instance:com.api.testcases.TS_001_CreateAccount@11bd0f3b]" started-at="2020-05-19T13:27:22 WIB" name="createAccountTest" data-provider="createAccount-data" finished-at="2020-05-19T13:27:25 WIB" duration-ms="3186" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[TC_001]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[Test Register Account API with positive path (All Valid)]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[Muhammad Yogie]]>
              </value>
            </param>
            <param index="3">
              <value>
                <![CDATA[yoginugrohoo@gmail.com]]>
              </value>
            </param>
            <param index="4">
              <value>
                <![CDATA[83833833834]]>
              </value>
            </param>
            <param index="5">
              <value>
                <![CDATA[Password123@]]>
              </value>
            </param>
            <param index="6">
              <value>
                <![CDATA[Success]]>
              </value>
            </param>
            <param index="7">
              <value>
                <![CDATA[201]]>
              </value>
            </param>
            <param index="8">
              <value>
                <![CDATA[Account has successfully created]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- createAccountTest -->
        <test-method signature="createAccountTest(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String)[pri:0, instance:com.api.testcases.TS_001_CreateAccount@11bd0f3b]" started-at="2020-05-19T13:27:25 WIB" name="createAccountTest" data-provider="createAccount-data" finished-at="2020-05-19T13:27:26 WIB" duration-ms="1440" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[TC_002]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[Test Register Account API if User Exist (email exist)]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[Muhammad Yogie]]>
              </value>
            </param>
            <param index="3">
              <value>
                <![CDATA[yoginugrohoo@gmail.com]]>
              </value>
            </param>
            <param index="4">
              <value>
                <![CDATA[83833833835]]>
              </value>
            </param>
            <param index="5">
              <value>
                <![CDATA[Password123@]]>
              </value>
            </param>
            <param index="6">
              <value>
                <![CDATA[Fail]]>
              </value>
            </param>
            <param index="7">
              <value>
                <![CDATA[403]]>
              </value>
            </param>
            <param index="8">
              <value>
                <![CDATA[Email already registered]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- createAccountTest -->
        <test-method signature="createAccountTest(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String)[pri:0, instance:com.api.testcases.TS_001_CreateAccount@11bd0f3b]" started-at="2020-05-19T13:27:26 WIB" name="createAccountTest" data-provider="createAccount-data" finished-at="2020-05-19T13:27:28 WIB" duration-ms="1519" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[TC_003]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[Test Register Account API if User Exist (phone number exist)]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[Muhammad Yogie]]>
              </value>
            </param>
            <param index="3">
              <value>
                <![CDATA[yoginugrohoo2@gmail.com]]>
              </value>
            </param>
            <param index="4">
              <value>
                <![CDATA[83833833834]]>
              </value>
            </param>
            <param index="5">
              <value>
                <![CDATA[Password123@]]>
              </value>
            </param>
            <param index="6">
              <value>
                <![CDATA[Fail]]>
              </value>
            </param>
            <param index="7">
              <value>
                <![CDATA[403]]>
              </value>
            </param>
            <param index="8">
              <value>
                <![CDATA[Phone number already registered]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- createAccountTest -->
        <test-method signature="createAccountTest(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String)[pri:0, instance:com.api.testcases.TS_001_CreateAccount@11bd0f3b]" started-at="2020-05-19T13:27:28 WIB" name="createAccountTest" data-provider="createAccount-data" finished-at="2020-05-19T13:27:29 WIB" duration-ms="1513" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[TC_004]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[Test Register Account API with invalid name (less than 3 char)]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[Mu]]>
              </value>
            </param>
            <param index="3">
              <value>
                <![CDATA[yoginugrohoo2@gmail.com]]>
              </value>
            </param>
            <param index="4">
              <value>
                <![CDATA[83833833835]]>
              </value>
            </param>
            <param index="5">
              <value>
                <![CDATA[Password123@]]>
              </value>
            </param>
            <param index="6">
              <value>
                <![CDATA[Fail]]>
              </value>
            </param>
            <param index="7">
              <value>
                <![CDATA[403]]>
              </value>
            </param>
            <param index="8">
              <value>
                <![CDATA[Invalid name]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- createAccountTest -->
        <test-method signature="createAccountTest(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String)[pri:0, instance:com.api.testcases.TS_001_CreateAccount@11bd0f3b]" started-at="2020-05-19T13:27:29 WIB" name="createAccountTest" data-provider="createAccount-data" finished-at="2020-05-19T13:27:31 WIB" duration-ms="1520" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[TC_005]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[Test Register Account API with invalid name (more than 20 char)]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[Muhammad Yogie Nugroh]]>
              </value>
            </param>
            <param index="3">
              <value>
                <![CDATA[yoginugrohoo2@gmail.com]]>
              </value>
            </param>
            <param index="4">
              <value>
                <![CDATA[83833833835]]>
              </value>
            </param>
            <param index="5">
              <value>
                <![CDATA[Password123@]]>
              </value>
            </param>
            <param index="6">
              <value>
                <![CDATA[Fail]]>
              </value>
            </param>
            <param index="7">
              <value>
                <![CDATA[403]]>
              </value>
            </param>
            <param index="8">
              <value>
                <![CDATA[Invalid name]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- createAccountTest -->
        <test-method signature="createAccountTest(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String)[pri:0, instance:com.api.testcases.TS_001_CreateAccount@11bd0f3b]" started-at="2020-05-19T13:27:31 WIB" name="createAccountTest" data-provider="createAccount-data" finished-at="2020-05-19T13:27:32 WIB" duration-ms="1428" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[TC_006]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[Test Register Account API with invalid name (contain digit)]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[Muhammad Yogie123]]>
              </value>
            </param>
            <param index="3">
              <value>
                <![CDATA[yoginugrohoo2@gmail.com]]>
              </value>
            </param>
            <param index="4">
              <value>
                <![CDATA[83833833835]]>
              </value>
            </param>
            <param index="5">
              <value>
                <![CDATA[Password123@]]>
              </value>
            </param>
            <param index="6">
              <value>
                <![CDATA[Fail]]>
              </value>
            </param>
            <param index="7">
              <value>
                <![CDATA[403]]>
              </value>
            </param>
            <param index="8">
              <value>
                <![CDATA[Invalid name]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- createAccountTest -->
        <test-method signature="createAccountTest(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String)[pri:0, instance:com.api.testcases.TS_001_CreateAccount@11bd0f3b]" started-at="2020-05-19T13:27:32 WIB" name="createAccountTest" data-provider="createAccount-data" finished-at="2020-05-19T13:27:34 WIB" duration-ms="1481" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[TC_007]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[Test Register Account API with invalid name (contain symbol)]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[Muhammad Yogie@]]>
              </value>
            </param>
            <param index="3">
              <value>
                <![CDATA[yoginugrohoo2@gmail.com]]>
              </value>
            </param>
            <param index="4">
              <value>
                <![CDATA[83833833835]]>
              </value>
            </param>
            <param index="5">
              <value>
                <![CDATA[Password123@]]>
              </value>
            </param>
            <param index="6">
              <value>
                <![CDATA[Fail]]>
              </value>
            </param>
            <param index="7">
              <value>
                <![CDATA[403]]>
              </value>
            </param>
            <param index="8">
              <value>
                <![CDATA[Invalid name]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- createAccountTest -->
        <test-method signature="createAccountTest(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String)[pri:0, instance:com.api.testcases.TS_001_CreateAccount@11bd0f3b]" started-at="2020-05-19T13:27:34 WIB" name="createAccountTest" data-provider="createAccount-data" finished-at="2020-05-19T13:27:35 WIB" duration-ms="1433" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[TC_008]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[Test Register Account API with invalid name (empty field)]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[]]>
              </value>
            </param>
            <param index="3">
              <value>
                <![CDATA[yoginugrohoo2@gmail.com]]>
              </value>
            </param>
            <param index="4">
              <value>
                <![CDATA[83833833835]]>
              </value>
            </param>
            <param index="5">
              <value>
                <![CDATA[Password123@]]>
              </value>
            </param>
            <param index="6">
              <value>
                <![CDATA[Fail]]>
              </value>
            </param>
            <param index="7">
              <value>
                <![CDATA[403]]>
              </value>
            </param>
            <param index="8">
              <value>
                <![CDATA[Invalid name]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- createAccountTest -->
        <test-method signature="createAccountTest(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String)[pri:0, instance:com.api.testcases.TS_001_CreateAccount@11bd0f3b]" started-at="2020-05-19T13:27:35 WIB" name="createAccountTest" data-provider="createAccount-data" finished-at="2020-05-19T13:27:37 WIB" duration-ms="1417" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[TC_009]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[Test Register Account API with invalid email (missing domain name)]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[Muhammad Yogie]]>
              </value>
            </param>
            <param index="3">
              <value>
                <![CDATA[yoginugrohoo2@.com]]>
              </value>
            </param>
            <param index="4">
              <value>
                <![CDATA[83833833835]]>
              </value>
            </param>
            <param index="5">
              <value>
                <![CDATA[Password123@]]>
              </value>
            </param>
            <param index="6">
              <value>
                <![CDATA[Fail]]>
              </value>
            </param>
            <param index="7">
              <value>
                <![CDATA[403]]>
              </value>
            </param>
            <param index="8">
              <value>
                <![CDATA[Invalid email]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- createAccountTest -->
        <test-method signature="createAccountTest(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String)[pri:0, instance:com.api.testcases.TS_001_CreateAccount@11bd0f3b]" started-at="2020-05-19T13:27:37 WIB" name="createAccountTest" data-provider="createAccount-data" finished-at="2020-05-19T13:27:38 WIB" duration-ms="1447" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[TC_010]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[Test Register Account API with invalid email (missing top level domain)]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[Muhammad Yogie]]>
              </value>
            </param>
            <param index="3">
              <value>
                <![CDATA[yoginugrohoo2@gmail]]>
              </value>
            </param>
            <param index="4">
              <value>
                <![CDATA[83833833835]]>
              </value>
            </param>
            <param index="5">
              <value>
                <![CDATA[Password123@]]>
              </value>
            </param>
            <param index="6">
              <value>
                <![CDATA[Fail]]>
              </value>
            </param>
            <param index="7">
              <value>
                <![CDATA[403]]>
              </value>
            </param>
            <param index="8">
              <value>
                <![CDATA[Invalid email]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- createAccountTest -->
        <test-method signature="createAccountTest(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String)[pri:0, instance:com.api.testcases.TS_001_CreateAccount@11bd0f3b]" started-at="2020-05-19T13:27:38 WIB" name="createAccountTest" data-provider="createAccount-data" finished-at="2020-05-19T13:27:40 WIB" duration-ms="1509" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[TC_011]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[Test Register Account API with invalid email (recepient name missing)]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[Muhammad Yogie]]>
              </value>
            </param>
            <param index="3">
              <value>
                <![CDATA[@gmail.com]]>
              </value>
            </param>
            <param index="4">
              <value>
                <![CDATA[83833833835]]>
              </value>
            </param>
            <param index="5">
              <value>
                <![CDATA[Password123@]]>
              </value>
            </param>
            <param index="6">
              <value>
                <![CDATA[Fail]]>
              </value>
            </param>
            <param index="7">
              <value>
                <![CDATA[403]]>
              </value>
            </param>
            <param index="8">
              <value>
                <![CDATA[Invalid email]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- createAccountTest -->
        <test-method signature="createAccountTest(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String)[pri:0, instance:com.api.testcases.TS_001_CreateAccount@11bd0f3b]" started-at="2020-05-19T13:27:40 WIB" name="createAccountTest" data-provider="createAccount-data" finished-at="2020-05-19T13:27:41 WIB" duration-ms="1485" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[TC_012]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[Test Register Account API with invalid email (missing @ symbol)]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[Muhammad Yogie]]>
              </value>
            </param>
            <param index="3">
              <value>
                <![CDATA[yoginugrohoo2gmail.com]]>
              </value>
            </param>
            <param index="4">
              <value>
                <![CDATA[83833833835]]>
              </value>
            </param>
            <param index="5">
              <value>
                <![CDATA[Password123@]]>
              </value>
            </param>
            <param index="6">
              <value>
                <![CDATA[Fail]]>
              </value>
            </param>
            <param index="7">
              <value>
                <![CDATA[403]]>
              </value>
            </param>
            <param index="8">
              <value>
                <![CDATA[Invalid email]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- createAccountTest -->
        <test-method signature="createAccountTest(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String)[pri:0, instance:com.api.testcases.TS_001_CreateAccount@11bd0f3b]" started-at="2020-05-19T13:27:41 WIB" name="createAccountTest" data-provider="createAccount-data" finished-at="2020-05-19T13:27:42 WIB" duration-ms="1468" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[TC_013]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[Test Register Account API with invalid email (double @ symbol)]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[Muhammad Yogie]]>
              </value>
            </param>
            <param index="3">
              <value>
                <![CDATA[yoginugrohoo2@@gmail.com]]>
              </value>
            </param>
            <param index="4">
              <value>
                <![CDATA[83833833835]]>
              </value>
            </param>
            <param index="5">
              <value>
                <![CDATA[Password123@]]>
              </value>
            </param>
            <param index="6">
              <value>
                <![CDATA[Fail]]>
              </value>
            </param>
            <param index="7">
              <value>
                <![CDATA[403]]>
              </value>
            </param>
            <param index="8">
              <value>
                <![CDATA[Invalid email]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- createAccountTest -->
        <test-method signature="createAccountTest(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String)[pri:0, instance:com.api.testcases.TS_001_CreateAccount@11bd0f3b]" started-at="2020-05-19T13:27:42 WIB" name="createAccountTest" data-provider="createAccount-data" finished-at="2020-05-19T13:27:44 WIB" duration-ms="1577" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[TC_014]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[Test Register Account API with invalid email (contain whitespace)]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[Muhammad Yogie]]>
              </value>
            </param>
            <param index="3">
              <value>
                <![CDATA[yogi nugrohoo2@gmail.com]]>
              </value>
            </param>
            <param index="4">
              <value>
                <![CDATA[83833833835]]>
              </value>
            </param>
            <param index="5">
              <value>
                <![CDATA[Password123@]]>
              </value>
            </param>
            <param index="6">
              <value>
                <![CDATA[Fail]]>
              </value>
            </param>
            <param index="7">
              <value>
                <![CDATA[403]]>
              </value>
            </param>
            <param index="8">
              <value>
                <![CDATA[Invalid email]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- createAccountTest -->
        <test-method signature="createAccountTest(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String)[pri:0, instance:com.api.testcases.TS_001_CreateAccount@11bd0f3b]" started-at="2020-05-19T13:27:44 WIB" name="createAccountTest" data-provider="createAccount-data" finished-at="2020-05-19T13:27:46 WIB" duration-ms="1430" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[TC_015]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[Test Register Account API with invalid email (empty field)]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[Muhammad Yogie]]>
              </value>
            </param>
            <param index="3">
              <value>
                <![CDATA[]]>
              </value>
            </param>
            <param index="4">
              <value>
                <![CDATA[83833833835]]>
              </value>
            </param>
            <param index="5">
              <value>
                <![CDATA[Password123@]]>
              </value>
            </param>
            <param index="6">
              <value>
                <![CDATA[Fail]]>
              </value>
            </param>
            <param index="7">
              <value>
                <![CDATA[403]]>
              </value>
            </param>
            <param index="8">
              <value>
                <![CDATA[Invalid email]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- createAccountTest -->
        <test-method signature="createAccountTest(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String)[pri:0, instance:com.api.testcases.TS_001_CreateAccount@11bd0f3b]" started-at="2020-05-19T13:27:46 WIB" name="createAccountTest" data-provider="createAccount-data" finished-at="2020-05-19T13:27:47 WIB" duration-ms="1468" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[TC_016]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[Test Register Account API with invalid phone number (less than 9 digit)]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[Muhammad Yogie]]>
              </value>
            </param>
            <param index="3">
              <value>
                <![CDATA[yoginugrohoo2@gmail.com]]>
              </value>
            </param>
            <param index="4">
              <value>
                <![CDATA[83833833]]>
              </value>
            </param>
            <param index="5">
              <value>
                <![CDATA[Password123@]]>
              </value>
            </param>
            <param index="6">
              <value>
                <![CDATA[Fail]]>
              </value>
            </param>
            <param index="7">
              <value>
                <![CDATA[403]]>
              </value>
            </param>
            <param index="8">
              <value>
                <![CDATA[Invalid phone]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- createAccountTest -->
        <test-method signature="createAccountTest(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String)[pri:0, instance:com.api.testcases.TS_001_CreateAccount@11bd0f3b]" started-at="2020-05-19T13:27:47 WIB" name="createAccountTest" data-provider="createAccount-data" finished-at="2020-05-19T13:27:50 WIB" duration-ms="2997" status="FAIL">
          <params>
            <param index="0">
              <value>
                <![CDATA[TC_017]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[Test Register Account API with invalid phone number (more than 12 digit)]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[Muhammad Yogie]]>
              </value>
            </param>
            <param index="3">
              <value>
                <![CDATA[yoginugrohoo2@gmail.com]]>
              </value>
            </param>
            <param index="4">
              <value>
                <![CDATA[8383383383567]]>
              </value>
            </param>
            <param index="5">
              <value>
                <![CDATA[Password123@]]>
              </value>
            </param>
            <param index="6">
              <value>
                <![CDATA[Fail]]>
              </value>
            </param>
            <param index="7">
              <value>
                <![CDATA[403]]>
              </value>
            </param>
            <param index="8">
              <value>
                <![CDATA[Invalid phone]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[1 expectation failed.
Expected status code <403> but was <201>.
]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: 1 expectation failed.
Expected status code <403> but was <201>.

at java.base/jdk.internal.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)
at java.base/jdk.internal.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62)
at java.base/jdk.internal.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
at java.base/java.lang.reflect.Constructor.newInstance(Constructor.java:490)
at org.codehaus.groovy.reflection.CachedConstructor.invoke(CachedConstructor.java:83)
at org.codehaus.groovy.reflection.CachedConstructor.doConstructorInvoke(CachedConstructor.java:77)
at org.codehaus.groovy.runtime.callsite.ConstructorSite$ConstructorSiteNoUnwrap.callConstructor(ConstructorSite.java:84)
at org.codehaus.groovy.runtime.callsite.CallSiteArray.defaultCallConstructor(CallSiteArray.java:59)
at org.codehaus.groovy.runtime.callsite.AbstractCallSite.callConstructor(AbstractCallSite.java:238)
at org.codehaus.groovy.runtime.callsite.AbstractCallSite.callConstructor(AbstractCallSite.java:250)
at io.restassured.internal.ResponseSpecificationImpl$HamcrestAssertionClosure.validate(ResponseSpecificationImpl.groovy:494)
at io.restassured.internal.ResponseSpecificationImpl$HamcrestAssertionClosure$validate$1.call(Unknown Source)
at io.restassured.internal.ResponseSpecificationImpl.validateResponseIfRequired(ResponseSpecificationImpl.groovy:656)
at jdk.internal.reflect.GeneratedMethodAccessor31.invoke(Unknown Source)
at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.base/java.lang.reflect.Method.invoke(Method.java:566)
at org.codehaus.groovy.runtime.callsite.PogoMetaMethodSite$PogoCachedMethodSiteNoUnwrapNoCoerce.invoke(PogoMetaMethodSite.java:210)
at org.codehaus.groovy.runtime.callsite.PogoMetaMethodSite.callCurrent(PogoMetaMethodSite.java:59)
at org.codehaus.groovy.runtime.callsite.AbstractCallSite.callCurrent(AbstractCallSite.java:169)
at io.restassured.internal.ResponseSpecificationImpl.statusCode(ResponseSpecificationImpl.groovy:125)
at io.restassured.specification.ResponseSpecification$statusCode$0.callCurrent(Unknown Source)
at io.restassured.internal.ResponseSpecificationImpl.statusCode(ResponseSpecificationImpl.groovy:133)
at io.restassured.internal.ValidatableResponseOptionsImpl.statusCode(ValidatableResponseOptionsImpl.java:119)
at com.api.testcases.TS_001_CreateAccount.createAccountTest(TS_001_CreateAccount.java:79)
at jdk.internal.reflect.GeneratedMethodAccessor100.invoke(Unknown Source)
at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.base/java.lang.reflect.Method.invoke(Method.java:566)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:134)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:597)
at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:173)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:816)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:146)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1540)
at org.testng.TestRunner.privateRun(TestRunner.java:766)
at org.testng.TestRunner.run(TestRunner.java:587)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:384)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:378)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:337)
at org.testng.SuiteRunner.run(SuiteRunner.java:286)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1187)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1109)
at org.testng.TestNG.runSuites(TestNG.java:1039)
at org.testng.TestNG.run(TestNG.java:1007)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- createAccountTest -->
        <test-method signature="createAccountTest(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String)[pri:0, instance:com.api.testcases.TS_001_CreateAccount@11bd0f3b]" started-at="2020-05-19T13:27:50 WIB" name="createAccountTest" data-provider="createAccount-data" finished-at="2020-05-19T13:27:51 WIB" duration-ms="1480" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[TC_018]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[Test Register Account API with invalid phone number (contain symbol)]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[Muhammad Yogie]]>
              </value>
            </param>
            <param index="3">
              <value>
                <![CDATA[yoginugrohoo2@gmail.com]]>
              </value>
            </param>
            <param index="4">
              <value>
                <![CDATA[@@@]]>
              </value>
            </param>
            <param index="5">
              <value>
                <![CDATA[Password123@]]>
              </value>
            </param>
            <param index="6">
              <value>
                <![CDATA[Fail]]>
              </value>
            </param>
            <param index="7">
              <value>
                <![CDATA[403]]>
              </value>
            </param>
            <param index="8">
              <value>
                <![CDATA[Invalid phone]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- createAccountTest -->
        <test-method signature="createAccountTest(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String)[pri:0, instance:com.api.testcases.TS_001_CreateAccount@11bd0f3b]" started-at="2020-05-19T13:27:51 WIB" name="createAccountTest" data-provider="createAccount-data" finished-at="2020-05-19T13:27:53 WIB" duration-ms="1451" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[TC_019]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[Test Register Account API with invalid phone number (contain alphabet)]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[Muhammad Yogie]]>
              </value>
            </param>
            <param index="3">
              <value>
                <![CDATA[yoginugrohoo2@gmail.com]]>
              </value>
            </param>
            <param index="4">
              <value>
                <![CDATA[abc]]>
              </value>
            </param>
            <param index="5">
              <value>
                <![CDATA[Password123@]]>
              </value>
            </param>
            <param index="6">
              <value>
                <![CDATA[Fail]]>
              </value>
            </param>
            <param index="7">
              <value>
                <![CDATA[403]]>
              </value>
            </param>
            <param index="8">
              <value>
                <![CDATA[Invalid phone]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- createAccountTest -->
        <test-method signature="createAccountTest(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String)[pri:0, instance:com.api.testcases.TS_001_CreateAccount@11bd0f3b]" started-at="2020-05-19T13:27:53 WIB" name="createAccountTest" data-provider="createAccount-data" finished-at="2020-05-19T13:27:55 WIB" duration-ms="1835" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[TC_020]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[Test Register Account API with invalid phone number (contain whitespace)]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[Muhammad Yogie]]>
              </value>
            </param>
            <param index="3">
              <value>
                <![CDATA[yoginugrohoo2@gmail.com]]>
              </value>
            </param>
            <param index="4">
              <value>
                <![CDATA[6283 833833835]]>
              </value>
            </param>
            <param index="5">
              <value>
                <![CDATA[Password123@]]>
              </value>
            </param>
            <param index="6">
              <value>
                <![CDATA[Fail]]>
              </value>
            </param>
            <param index="7">
              <value>
                <![CDATA[403]]>
              </value>
            </param>
            <param index="8">
              <value>
                <![CDATA[Invalid phone]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- createAccountTest -->
        <test-method signature="createAccountTest(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String)[pri:0, instance:com.api.testcases.TS_001_CreateAccount@11bd0f3b]" started-at="2020-05-19T13:27:55 WIB" name="createAccountTest" data-provider="createAccount-data" finished-at="2020-05-19T13:27:56 WIB" duration-ms="1468" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[TC_021]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[Test Register Account API with invalid phone number (empty field)]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[Muhammad Yogie]]>
              </value>
            </param>
            <param index="3">
              <value>
                <![CDATA[yoginugrohoo2@gmail.com]]>
              </value>
            </param>
            <param index="4">
              <value>
                <![CDATA[]]>
              </value>
            </param>
            <param index="5">
              <value>
                <![CDATA[Password123@]]>
              </value>
            </param>
            <param index="6">
              <value>
                <![CDATA[Fail]]>
              </value>
            </param>
            <param index="7">
              <value>
                <![CDATA[403]]>
              </value>
            </param>
            <param index="8">
              <value>
                <![CDATA[Invalid phone]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- createAccountTest -->
        <test-method signature="createAccountTest(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String)[pri:0, instance:com.api.testcases.TS_001_CreateAccount@11bd0f3b]" started-at="2020-05-19T13:27:56 WIB" name="createAccountTest" data-provider="createAccount-data" finished-at="2020-05-19T13:27:58 WIB" duration-ms="1436" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[TC_022]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[Test Register Account API with invalid password (less than 8 char)]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[Muhammad Yogie]]>
              </value>
            </param>
            <param index="3">
              <value>
                <![CDATA[yoginugrohoo2@gmail.com]]>
              </value>
            </param>
            <param index="4">
              <value>
                <![CDATA[6283833833835]]>
              </value>
            </param>
            <param index="5">
              <value>
                <![CDATA[Passw2@]]>
              </value>
            </param>
            <param index="6">
              <value>
                <![CDATA[Fail]]>
              </value>
            </param>
            <param index="7">
              <value>
                <![CDATA[403]]>
              </value>
            </param>
            <param index="8">
              <value>
                <![CDATA[Invalid password]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- createAccountTest -->
        <test-method signature="createAccountTest(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String)[pri:0, instance:com.api.testcases.TS_001_CreateAccount@11bd0f3b]" started-at="2020-05-19T13:27:58 WIB" name="createAccountTest" data-provider="createAccount-data" finished-at="2020-05-19T13:27:59 WIB" duration-ms="1487" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[TC_023]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[Test Register Account API with invalid password (more than 20 char)]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[Muhammad Yogie]]>
              </value>
            </param>
            <param index="3">
              <value>
                <![CDATA[yoginugrohoo2@gmail.com]]>
              </value>
            </param>
            <param index="4">
              <value>
                <![CDATA[6283833833835]]>
              </value>
            </param>
            <param index="5">
              <value>
                <![CDATA[Password123@Password1]]>
              </value>
            </param>
            <param index="6">
              <value>
                <![CDATA[Fail]]>
              </value>
            </param>
            <param index="7">
              <value>
                <![CDATA[403]]>
              </value>
            </param>
            <param index="8">
              <value>
                <![CDATA[Invalid password]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- createAccountTest -->
        <test-method signature="createAccountTest(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String)[pri:0, instance:com.api.testcases.TS_001_CreateAccount@11bd0f3b]" started-at="2020-05-19T13:27:59 WIB" name="createAccountTest" data-provider="createAccount-data" finished-at="2020-05-19T13:28:01 WIB" duration-ms="1406" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[TC_024]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[Test Register Account API with invalid password (no digit)]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[Muhammad Yogie]]>
              </value>
            </param>
            <param index="3">
              <value>
                <![CDATA[yoginugrohoo2@gmail.com]]>
              </value>
            </param>
            <param index="4">
              <value>
                <![CDATA[6283833833835]]>
              </value>
            </param>
            <param index="5">
              <value>
                <![CDATA[Password@]]>
              </value>
            </param>
            <param index="6">
              <value>
                <![CDATA[Fail]]>
              </value>
            </param>
            <param index="7">
              <value>
                <![CDATA[403]]>
              </value>
            </param>
            <param index="8">
              <value>
                <![CDATA[Invalid password]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- createAccountTest -->
        <test-method signature="createAccountTest(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String)[pri:0, instance:com.api.testcases.TS_001_CreateAccount@11bd0f3b]" started-at="2020-05-19T13:28:01 WIB" name="createAccountTest" data-provider="createAccount-data" finished-at="2020-05-19T13:28:02 WIB" duration-ms="1464" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[TC_025]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[Test Register Account API with invalid password (no uppercase)]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[Muhammad Yogie]]>
              </value>
            </param>
            <param index="3">
              <value>
                <![CDATA[yoginugrohoo2@gmail.com]]>
              </value>
            </param>
            <param index="4">
              <value>
                <![CDATA[6283833833835]]>
              </value>
            </param>
            <param index="5">
              <value>
                <![CDATA[password123@]]>
              </value>
            </param>
            <param index="6">
              <value>
                <![CDATA[Fail]]>
              </value>
            </param>
            <param index="7">
              <value>
                <![CDATA[403]]>
              </value>
            </param>
            <param index="8">
              <value>
                <![CDATA[Invalid password]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- createAccountTest -->
        <test-method signature="createAccountTest(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String)[pri:0, instance:com.api.testcases.TS_001_CreateAccount@11bd0f3b]" started-at="2020-05-19T13:28:02 WIB" name="createAccountTest" data-provider="createAccount-data" finished-at="2020-05-19T13:28:03 WIB" duration-ms="1459" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[TC_026]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[Test Register Account API with invalid password (no lowercase)]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[Muhammad Yogie]]>
              </value>
            </param>
            <param index="3">
              <value>
                <![CDATA[yoginugrohoo2@gmail.com]]>
              </value>
            </param>
            <param index="4">
              <value>
                <![CDATA[6283833833835]]>
              </value>
            </param>
            <param index="5">
              <value>
                <![CDATA[PASSWORD123@]]>
              </value>
            </param>
            <param index="6">
              <value>
                <![CDATA[Fail]]>
              </value>
            </param>
            <param index="7">
              <value>
                <![CDATA[403]]>
              </value>
            </param>
            <param index="8">
              <value>
                <![CDATA[Invalid password]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- createAccountTest -->
        <test-method signature="createAccountTest(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String)[pri:0, instance:com.api.testcases.TS_001_CreateAccount@11bd0f3b]" started-at="2020-05-19T13:28:03 WIB" name="createAccountTest" data-provider="createAccount-data" finished-at="2020-05-19T13:28:05 WIB" duration-ms="1404" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[TC_027]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[Test Register Account API with invalid password (no symbol)]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[Muhammad Yogie]]>
              </value>
            </param>
            <param index="3">
              <value>
                <![CDATA[yoginugrohoo2@gmail.com]]>
              </value>
            </param>
            <param index="4">
              <value>
                <![CDATA[6283833833835]]>
              </value>
            </param>
            <param index="5">
              <value>
                <![CDATA[Password123]]>
              </value>
            </param>
            <param index="6">
              <value>
                <![CDATA[Fail]]>
              </value>
            </param>
            <param index="7">
              <value>
                <![CDATA[403]]>
              </value>
            </param>
            <param index="8">
              <value>
                <![CDATA[Invalid password]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- createAccountTest -->
        <test-method signature="createAccountTest(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String)[pri:0, instance:com.api.testcases.TS_001_CreateAccount@11bd0f3b]" started-at="2020-05-19T13:28:05 WIB" name="createAccountTest" data-provider="createAccount-data" finished-at="2020-05-19T13:28:06 WIB" duration-ms="1416" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[TC_028]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[Test Register Account API with invalid password (contain whitespace)]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[Muhammad Yogie]]>
              </value>
            </param>
            <param index="3">
              <value>
                <![CDATA[yoginugrohoo2@gmail.com]]>
              </value>
            </param>
            <param index="4">
              <value>
                <![CDATA[6283833833835]]>
              </value>
            </param>
            <param index="5">
              <value>
                <![CDATA[Password123 @]]>
              </value>
            </param>
            <param index="6">
              <value>
                <![CDATA[Fail]]>
              </value>
            </param>
            <param index="7">
              <value>
                <![CDATA[403]]>
              </value>
            </param>
            <param index="8">
              <value>
                <![CDATA[Invalid password]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- createAccountTest -->
        <test-method signature="createAccountTest(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String)[pri:0, instance:com.api.testcases.TS_001_CreateAccount@11bd0f3b]" started-at="2020-05-19T13:28:06 WIB" name="createAccountTest" data-provider="createAccount-data" finished-at="2020-05-19T13:28:08 WIB" duration-ms="1511" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[TC_029]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[Test Register Account API with invalid password (empty)]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[Muhammad Yogie]]>
              </value>
            </param>
            <param index="3">
              <value>
                <![CDATA[yoginugrohoo2@gmail.com]]>
              </value>
            </param>
            <param index="4">
              <value>
                <![CDATA[6283833833835]]>
              </value>
            </param>
            <param index="5">
              <value>
                <![CDATA[]]>
              </value>
            </param>
            <param index="6">
              <value>
                <![CDATA[]]>
              </value>
            </param>
            <param index="7">
              <value>
                <![CDATA[403]]>
              </value>
            </param>
            <param index="8">
              <value>
                <![CDATA[Invalid password]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- createAccountTest -->
      </class> <!-- com.api.testcases.TS_001_CreateAccount -->
      <class name="com.api.testcases.TS_003_SendOTP">
        <test-method is-config="true" signature="setUp()[pri:0, instance:com.api.testcases.TS_003_SendOTP@79da8dc5]" started-at="2020-05-19T13:28:38 WIB" name="setUp" finished-at="2020-05-19T13:28:38 WIB" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method is-config="true" signature="firstLogMessage()[pri:0, instance:com.api.testcases.TS_003_SendOTP@79da8dc5]" started-at="2020-05-19T13:28:38 WIB" name="firstLogMessage" finished-at="2020-05-19T13:28:38 WIB" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- firstLogMessage -->
        <test-method signature="sendOTPTest(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String)[pri:0, instance:com.api.testcases.TS_003_SendOTP@79da8dc5]" started-at="2020-05-19T13:28:38 WIB" name="sendOTPTest" data-provider="sendOTP-data" finished-at="2020-05-19T13:28:40 WIB" duration-ms="1531" status="FAIL">
          <params>
            <param index="0">
              <value>
                <![CDATA[TC_049]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[Test Send OTP API if user exist, phone number true & email true ]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[83833833834]]>
              </value>
            </param>
            <param index="3">
              <value>
                <![CDATA[yoginugrohoo@gmail.com]]>
              </value>
            </param>
            <param index="4">
              <value>
                <![CDATA[Success]]>
              </value>
            </param>
            <param index="5">
              <value>
                <![CDATA[201]]>
              </value>
            </param>
            <param index="6">
              <value>
                <![CDATA[-]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[1 expectation failed.
Expected status code <201> but was <500>.
]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: 1 expectation failed.
Expected status code <201> but was <500>.

at java.base/jdk.internal.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)
at java.base/jdk.internal.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62)
at java.base/jdk.internal.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
at java.base/java.lang.reflect.Constructor.newInstance(Constructor.java:490)
at org.codehaus.groovy.reflection.CachedConstructor.invoke(CachedConstructor.java:83)
at org.codehaus.groovy.reflection.CachedConstructor.doConstructorInvoke(CachedConstructor.java:77)
at org.codehaus.groovy.runtime.callsite.ConstructorSite$ConstructorSiteNoUnwrap.callConstructor(ConstructorSite.java:84)
at org.codehaus.groovy.runtime.callsite.AbstractCallSite.callConstructor(AbstractCallSite.java:250)
at io.restassured.internal.ResponseSpecificationImpl$HamcrestAssertionClosure.validate(ResponseSpecificationImpl.groovy:494)
at io.restassured.internal.ResponseSpecificationImpl$HamcrestAssertionClosure$validate$1.call(Unknown Source)
at io.restassured.internal.ResponseSpecificationImpl.validateResponseIfRequired(ResponseSpecificationImpl.groovy:656)
at jdk.internal.reflect.GeneratedMethodAccessor31.invoke(Unknown Source)
at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.base/java.lang.reflect.Method.invoke(Method.java:566)
at org.codehaus.groovy.runtime.callsite.PogoMetaMethodSite$PogoCachedMethodSiteNoUnwrapNoCoerce.invoke(PogoMetaMethodSite.java:210)
at org.codehaus.groovy.runtime.callsite.PogoMetaMethodSite.callCurrent(PogoMetaMethodSite.java:59)
at org.codehaus.groovy.runtime.callsite.AbstractCallSite.callCurrent(AbstractCallSite.java:169)
at io.restassured.internal.ResponseSpecificationImpl.statusCode(ResponseSpecificationImpl.groovy:125)
at io.restassured.specification.ResponseSpecification$statusCode$0.callCurrent(Unknown Source)
at io.restassured.internal.ResponseSpecificationImpl.statusCode(ResponseSpecificationImpl.groovy:133)
at io.restassured.internal.ValidatableResponseOptionsImpl.statusCode(ValidatableResponseOptionsImpl.java:119)
at com.api.testcases.TS_003_SendOTP.sendOTPTest(TS_003_SendOTP.java:47)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.base/java.lang.reflect.Method.invoke(Method.java:566)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:134)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:597)
at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:173)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:816)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:146)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1540)
at org.testng.TestRunner.privateRun(TestRunner.java:766)
at org.testng.TestRunner.run(TestRunner.java:587)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:384)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:378)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:337)
at org.testng.SuiteRunner.run(SuiteRunner.java:286)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1187)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1109)
at org.testng.TestNG.runSuites(TestNG.java:1039)
at org.testng.TestNG.run(TestNG.java:1007)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- sendOTPTest -->
        <test-method signature="sendOTPTest(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String)[pri:0, instance:com.api.testcases.TS_003_SendOTP@79da8dc5]" started-at="2020-05-19T13:28:40 WIB" name="sendOTPTest" data-provider="sendOTP-data" finished-at="2020-05-19T13:28:42 WIB" duration-ms="1510" status="FAIL">
          <params>
            <param index="0">
              <value>
                <![CDATA[TC_050]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[Test Send OTP API if user exist, phone number false but email true]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[83833833833]]>
              </value>
            </param>
            <param index="3">
              <value>
                <![CDATA[yoginugrohoo@gmail.com]]>
              </value>
            </param>
            <param index="4">
              <value>
                <![CDATA[Success]]>
              </value>
            </param>
            <param index="5">
              <value>
                <![CDATA[201]]>
              </value>
            </param>
            <param index="6">
              <value>
                <![CDATA[-]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[1 expectation failed.
Expected status code <201> but was <500>.
]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: 1 expectation failed.
Expected status code <201> but was <500>.

at java.base/jdk.internal.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)
at java.base/jdk.internal.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62)
at java.base/jdk.internal.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
at java.base/java.lang.reflect.Constructor.newInstance(Constructor.java:490)
at org.codehaus.groovy.reflection.CachedConstructor.invoke(CachedConstructor.java:83)
at org.codehaus.groovy.reflection.CachedConstructor.doConstructorInvoke(CachedConstructor.java:77)
at org.codehaus.groovy.runtime.callsite.ConstructorSite$ConstructorSiteNoUnwrap.callConstructor(ConstructorSite.java:84)
at org.codehaus.groovy.runtime.callsite.AbstractCallSite.callConstructor(AbstractCallSite.java:250)
at io.restassured.internal.ResponseSpecificationImpl$HamcrestAssertionClosure.validate(ResponseSpecificationImpl.groovy:494)
at io.restassured.internal.ResponseSpecificationImpl$HamcrestAssertionClosure$validate$1.call(Unknown Source)
at io.restassured.internal.ResponseSpecificationImpl.validateResponseIfRequired(ResponseSpecificationImpl.groovy:656)
at jdk.internal.reflect.GeneratedMethodAccessor31.invoke(Unknown Source)
at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.base/java.lang.reflect.Method.invoke(Method.java:566)
at org.codehaus.groovy.runtime.callsite.PogoMetaMethodSite$PogoCachedMethodSiteNoUnwrapNoCoerce.invoke(PogoMetaMethodSite.java:210)
at org.codehaus.groovy.runtime.callsite.PogoMetaMethodSite.callCurrent(PogoMetaMethodSite.java:59)
at org.codehaus.groovy.runtime.callsite.AbstractCallSite.callCurrent(AbstractCallSite.java:169)
at io.restassured.internal.ResponseSpecificationImpl.statusCode(ResponseSpecificationImpl.groovy:125)
at io.restassured.specification.ResponseSpecification$statusCode$0.callCurrent(Unknown Source)
at io.restassured.internal.ResponseSpecificationImpl.statusCode(ResponseSpecificationImpl.groovy:133)
at io.restassured.internal.ValidatableResponseOptionsImpl.statusCode(ValidatableResponseOptionsImpl.java:119)
at com.api.testcases.TS_003_SendOTP.sendOTPTest(TS_003_SendOTP.java:47)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.base/java.lang.reflect.Method.invoke(Method.java:566)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:134)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:597)
at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:173)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:816)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:146)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1540)
at org.testng.TestRunner.privateRun(TestRunner.java:766)
at org.testng.TestRunner.run(TestRunner.java:587)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:384)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:378)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:337)
at org.testng.SuiteRunner.run(SuiteRunner.java:286)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1187)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1109)
at org.testng.TestNG.runSuites(TestNG.java:1039)
at org.testng.TestNG.run(TestNG.java:1007)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- sendOTPTest -->
        <test-method signature="sendOTPTest(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String)[pri:0, instance:com.api.testcases.TS_003_SendOTP@79da8dc5]" started-at="2020-05-19T13:28:42 WIB" name="sendOTPTest" data-provider="sendOTP-data" finished-at="2020-05-19T13:28:43 WIB" duration-ms="1592" status="FAIL">
          <params>
            <param index="0">
              <value>
                <![CDATA[TC_051]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[Test Send OTP API if user exist, phone number true but email false]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[83833833834]]>
              </value>
            </param>
            <param index="3">
              <value>
                <![CDATA[yoginugroh@gmail.com]]>
              </value>
            </param>
            <param index="4">
              <value>
                <![CDATA[Success]]>
              </value>
            </param>
            <param index="5">
              <value>
                <![CDATA[201]]>
              </value>
            </param>
            <param index="6">
              <value>
                <![CDATA[-]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[1 expectation failed.
Expected status code <201> but was <500>.
]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: 1 expectation failed.
Expected status code <201> but was <500>.

at java.base/jdk.internal.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)
at java.base/jdk.internal.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62)
at java.base/jdk.internal.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
at java.base/java.lang.reflect.Constructor.newInstance(Constructor.java:490)
at org.codehaus.groovy.reflection.CachedConstructor.invoke(CachedConstructor.java:83)
at org.codehaus.groovy.reflection.CachedConstructor.doConstructorInvoke(CachedConstructor.java:77)
at org.codehaus.groovy.runtime.callsite.ConstructorSite$ConstructorSiteNoUnwrap.callConstructor(ConstructorSite.java:84)
at org.codehaus.groovy.runtime.callsite.AbstractCallSite.callConstructor(AbstractCallSite.java:250)
at io.restassured.internal.ResponseSpecificationImpl$HamcrestAssertionClosure.validate(ResponseSpecificationImpl.groovy:494)
at io.restassured.internal.ResponseSpecificationImpl$HamcrestAssertionClosure$validate$1.call(Unknown Source)
at io.restassured.internal.ResponseSpecificationImpl.validateResponseIfRequired(ResponseSpecificationImpl.groovy:656)
at jdk.internal.reflect.GeneratedMethodAccessor31.invoke(Unknown Source)
at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.base/java.lang.reflect.Method.invoke(Method.java:566)
at org.codehaus.groovy.runtime.callsite.PogoMetaMethodSite$PogoCachedMethodSiteNoUnwrapNoCoerce.invoke(PogoMetaMethodSite.java:210)
at org.codehaus.groovy.runtime.callsite.PogoMetaMethodSite.callCurrent(PogoMetaMethodSite.java:59)
at org.codehaus.groovy.runtime.callsite.AbstractCallSite.callCurrent(AbstractCallSite.java:169)
at io.restassured.internal.ResponseSpecificationImpl.statusCode(ResponseSpecificationImpl.groovy:125)
at io.restassured.specification.ResponseSpecification$statusCode$0.callCurrent(Unknown Source)
at io.restassured.internal.ResponseSpecificationImpl.statusCode(ResponseSpecificationImpl.groovy:133)
at io.restassured.internal.ValidatableResponseOptionsImpl.statusCode(ValidatableResponseOptionsImpl.java:119)
at com.api.testcases.TS_003_SendOTP.sendOTPTest(TS_003_SendOTP.java:47)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.base/java.lang.reflect.Method.invoke(Method.java:566)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:134)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:597)
at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:173)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:816)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:146)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1540)
at org.testng.TestRunner.privateRun(TestRunner.java:766)
at org.testng.TestRunner.run(TestRunner.java:587)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:384)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:378)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:337)
at org.testng.SuiteRunner.run(SuiteRunner.java:286)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1187)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1109)
at org.testng.TestNG.runSuites(TestNG.java:1039)
at org.testng.TestNG.run(TestNG.java:1007)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- sendOTPTest -->
        <test-method signature="sendOTPTest(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String)[pri:0, instance:com.api.testcases.TS_003_SendOTP@79da8dc5]" started-at="2020-05-19T13:28:43 WIB" name="sendOTPTest" data-provider="sendOTP-data" finished-at="2020-05-19T13:28:45 WIB" duration-ms="1469" status="FAIL">
          <params>
            <param index="0">
              <value>
                <![CDATA[TC_052]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[Test Send OTP API if user not exist]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[83833833833]]>
              </value>
            </param>
            <param index="3">
              <value>
                <![CDATA[yoginugroh@gmail.com]]>
              </value>
            </param>
            <param index="4">
              <value>
                <![CDATA[Success]]>
              </value>
            </param>
            <param index="5">
              <value>
                <![CDATA[201]]>
              </value>
            </param>
            <param index="6">
              <value>
                <![CDATA[-]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[1 expectation failed.
Expected status code <201> but was <500>.
]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: 1 expectation failed.
Expected status code <201> but was <500>.

at java.base/jdk.internal.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)
at java.base/jdk.internal.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62)
at java.base/jdk.internal.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
at java.base/java.lang.reflect.Constructor.newInstance(Constructor.java:490)
at org.codehaus.groovy.reflection.CachedConstructor.invoke(CachedConstructor.java:83)
at org.codehaus.groovy.reflection.CachedConstructor.doConstructorInvoke(CachedConstructor.java:77)
at org.codehaus.groovy.runtime.callsite.ConstructorSite$ConstructorSiteNoUnwrap.callConstructor(ConstructorSite.java:84)
at org.codehaus.groovy.runtime.callsite.AbstractCallSite.callConstructor(AbstractCallSite.java:250)
at io.restassured.internal.ResponseSpecificationImpl$HamcrestAssertionClosure.validate(ResponseSpecificationImpl.groovy:494)
at io.restassured.internal.ResponseSpecificationImpl$HamcrestAssertionClosure$validate$1.call(Unknown Source)
at io.restassured.internal.ResponseSpecificationImpl.validateResponseIfRequired(ResponseSpecificationImpl.groovy:656)
at jdk.internal.reflect.GeneratedMethodAccessor31.invoke(Unknown Source)
at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.base/java.lang.reflect.Method.invoke(Method.java:566)
at org.codehaus.groovy.runtime.callsite.PogoMetaMethodSite$PogoCachedMethodSiteNoUnwrapNoCoerce.invoke(PogoMetaMethodSite.java:210)
at org.codehaus.groovy.runtime.callsite.PogoMetaMethodSite.callCurrent(PogoMetaMethodSite.java:59)
at org.codehaus.groovy.runtime.callsite.AbstractCallSite.callCurrent(AbstractCallSite.java:169)
at io.restassured.internal.ResponseSpecificationImpl.statusCode(ResponseSpecificationImpl.groovy:125)
at io.restassured.specification.ResponseSpecification$statusCode$0.callCurrent(Unknown Source)
at io.restassured.internal.ResponseSpecificationImpl.statusCode(ResponseSpecificationImpl.groovy:133)
at io.restassured.internal.ValidatableResponseOptionsImpl.statusCode(ValidatableResponseOptionsImpl.java:119)
at com.api.testcases.TS_003_SendOTP.sendOTPTest(TS_003_SendOTP.java:47)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.base/java.lang.reflect.Method.invoke(Method.java:566)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:134)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:597)
at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:173)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:816)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:146)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1540)
at org.testng.TestRunner.privateRun(TestRunner.java:766)
at org.testng.TestRunner.run(TestRunner.java:587)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:384)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:378)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:337)
at org.testng.SuiteRunner.run(SuiteRunner.java:286)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1187)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1109)
at org.testng.TestNG.runSuites(TestNG.java:1039)
at org.testng.TestNG.run(TestNG.java:1007)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- sendOTPTest -->
        <test-method signature="sendOTPTest(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String)[pri:0, instance:com.api.testcases.TS_003_SendOTP@79da8dc5]" started-at="2020-05-19T13:28:45 WIB" name="sendOTPTest" data-provider="sendOTP-data" finished-at="2020-05-19T13:28:46 WIB" duration-ms="1484" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[TC_053]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[Test Send OTP API with invalid phone number (less than 9 digit)]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[83833833]]>
              </value>
            </param>
            <param index="3">
              <value>
                <![CDATA[yoginugrohoo@gmail.com]]>
              </value>
            </param>
            <param index="4">
              <value>
                <![CDATA[Fail]]>
              </value>
            </param>
            <param index="5">
              <value>
                <![CDATA[403]]>
              </value>
            </param>
            <param index="6">
              <value>
                <![CDATA[Invalid phone number]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- sendOTPTest -->
        <test-method signature="sendOTPTest(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String)[pri:0, instance:com.api.testcases.TS_003_SendOTP@79da8dc5]" started-at="2020-05-19T13:28:46 WIB" name="sendOTPTest" data-provider="sendOTP-data" finished-at="2020-05-19T13:28:48 WIB" duration-ms="1438" status="FAIL">
          <params>
            <param index="0">
              <value>
                <![CDATA[TC_054]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[Test Send OTP API with invalid phone number (more than 12 digit)]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[8383383383567]]>
              </value>
            </param>
            <param index="3">
              <value>
                <![CDATA[yoginugrohoo@gmail.com]]>
              </value>
            </param>
            <param index="4">
              <value>
                <![CDATA[Fail]]>
              </value>
            </param>
            <param index="5">
              <value>
                <![CDATA[403]]>
              </value>
            </param>
            <param index="6">
              <value>
                <![CDATA[Invalid phone number]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[1 expectation failed.
Expected status code <403> but was <500>.
]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: 1 expectation failed.
Expected status code <403> but was <500>.

at java.base/jdk.internal.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)
at java.base/jdk.internal.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62)
at java.base/jdk.internal.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
at java.base/java.lang.reflect.Constructor.newInstance(Constructor.java:490)
at org.codehaus.groovy.reflection.CachedConstructor.invoke(CachedConstructor.java:83)
at org.codehaus.groovy.reflection.CachedConstructor.doConstructorInvoke(CachedConstructor.java:77)
at org.codehaus.groovy.runtime.callsite.ConstructorSite$ConstructorSiteNoUnwrap.callConstructor(ConstructorSite.java:84)
at org.codehaus.groovy.runtime.callsite.AbstractCallSite.callConstructor(AbstractCallSite.java:250)
at io.restassured.internal.ResponseSpecificationImpl$HamcrestAssertionClosure.validate(ResponseSpecificationImpl.groovy:494)
at io.restassured.internal.ResponseSpecificationImpl$HamcrestAssertionClosure$validate$1.call(Unknown Source)
at io.restassured.internal.ResponseSpecificationImpl.validateResponseIfRequired(ResponseSpecificationImpl.groovy:656)
at jdk.internal.reflect.GeneratedMethodAccessor31.invoke(Unknown Source)
at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.base/java.lang.reflect.Method.invoke(Method.java:566)
at org.codehaus.groovy.runtime.callsite.PogoMetaMethodSite$PogoCachedMethodSiteNoUnwrapNoCoerce.invoke(PogoMetaMethodSite.java:210)
at org.codehaus.groovy.runtime.callsite.PogoMetaMethodSite.callCurrent(PogoMetaMethodSite.java:59)
at org.codehaus.groovy.runtime.callsite.AbstractCallSite.callCurrent(AbstractCallSite.java:169)
at io.restassured.internal.ResponseSpecificationImpl.statusCode(ResponseSpecificationImpl.groovy:125)
at io.restassured.specification.ResponseSpecification$statusCode$0.callCurrent(Unknown Source)
at io.restassured.internal.ResponseSpecificationImpl.statusCode(ResponseSpecificationImpl.groovy:133)
at io.restassured.internal.ValidatableResponseOptionsImpl.statusCode(ValidatableResponseOptionsImpl.java:119)
at com.api.testcases.TS_003_SendOTP.sendOTPTest(TS_003_SendOTP.java:61)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.base/java.lang.reflect.Method.invoke(Method.java:566)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:134)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:597)
at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:173)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:816)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:146)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1540)
at org.testng.TestRunner.privateRun(TestRunner.java:766)
at org.testng.TestRunner.run(TestRunner.java:587)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:384)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:378)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:337)
at org.testng.SuiteRunner.run(SuiteRunner.java:286)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1187)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1109)
at org.testng.TestNG.runSuites(TestNG.java:1039)
at org.testng.TestNG.run(TestNG.java:1007)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- sendOTPTest -->
        <test-method signature="sendOTPTest(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String)[pri:0, instance:com.api.testcases.TS_003_SendOTP@79da8dc5]" started-at="2020-05-19T13:28:48 WIB" name="sendOTPTest" data-provider="sendOTP-data" finished-at="2020-05-19T13:28:49 WIB" duration-ms="1521" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[TC_055]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[Test Send OTP API with invalid phone number (contain symbol)]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[8383383383@]]>
              </value>
            </param>
            <param index="3">
              <value>
                <![CDATA[yoginugrohoo@gmail.com]]>
              </value>
            </param>
            <param index="4">
              <value>
                <![CDATA[Fail]]>
              </value>
            </param>
            <param index="5">
              <value>
                <![CDATA[403]]>
              </value>
            </param>
            <param index="6">
              <value>
                <![CDATA[Invalid phone number]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- sendOTPTest -->
        <test-method signature="sendOTPTest(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String)[pri:0, instance:com.api.testcases.TS_003_SendOTP@79da8dc5]" started-at="2020-05-19T13:28:49 WIB" name="sendOTPTest" data-provider="sendOTP-data" finished-at="2020-05-19T13:28:51 WIB" duration-ms="1463" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[TC_056]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[Test Send OTP API with invalid phone number (contain alphabet)]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[8383383383b]]>
              </value>
            </param>
            <param index="3">
              <value>
                <![CDATA[yoginugrohoo@gmail.com]]>
              </value>
            </param>
            <param index="4">
              <value>
                <![CDATA[Fail]]>
              </value>
            </param>
            <param index="5">
              <value>
                <![CDATA[403]]>
              </value>
            </param>
            <param index="6">
              <value>
                <![CDATA[Invalid phone number]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- sendOTPTest -->
        <test-method signature="sendOTPTest(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String)[pri:0, instance:com.api.testcases.TS_003_SendOTP@79da8dc5]" started-at="2020-05-19T13:28:51 WIB" name="sendOTPTest" data-provider="sendOTP-data" finished-at="2020-05-19T13:28:52 WIB" duration-ms="1431" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[TC_057]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[Test Send OTP API with invalid phone number (contain whitespace)]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[83 833833834]]>
              </value>
            </param>
            <param index="3">
              <value>
                <![CDATA[yoginugrohoo@gmail.com]]>
              </value>
            </param>
            <param index="4">
              <value>
                <![CDATA[Fail]]>
              </value>
            </param>
            <param index="5">
              <value>
                <![CDATA[403]]>
              </value>
            </param>
            <param index="6">
              <value>
                <![CDATA[Invalid phone number]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- sendOTPTest -->
        <test-method signature="sendOTPTest(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String)[pri:0, instance:com.api.testcases.TS_003_SendOTP@79da8dc5]" started-at="2020-05-19T13:28:52 WIB" name="sendOTPTest" data-provider="sendOTP-data" finished-at="2020-05-19T13:28:53 WIB" duration-ms="1457" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[TC_058]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[Test Send OTP API with invalid phone number (empty field)]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[]]>
              </value>
            </param>
            <param index="3">
              <value>
                <![CDATA[yoginugrohoo@gmail.com]]>
              </value>
            </param>
            <param index="4">
              <value>
                <![CDATA[Fail]]>
              </value>
            </param>
            <param index="5">
              <value>
                <![CDATA[403]]>
              </value>
            </param>
            <param index="6">
              <value>
                <![CDATA[Invalid phone number]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- sendOTPTest -->
        <test-method signature="sendOTPTest(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String)[pri:0, instance:com.api.testcases.TS_003_SendOTP@79da8dc5]" started-at="2020-05-19T13:28:53 WIB" name="sendOTPTest" data-provider="sendOTP-data" finished-at="2020-05-19T13:28:55 WIB" duration-ms="1458" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[TC_059]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[Test Send OTP API with invalid email (missing domain name)]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[83833833834]]>
              </value>
            </param>
            <param index="3">
              <value>
                <![CDATA[yoginugrohoo@.com]]>
              </value>
            </param>
            <param index="4">
              <value>
                <![CDATA[Fail]]>
              </value>
            </param>
            <param index="5">
              <value>
                <![CDATA[403]]>
              </value>
            </param>
            <param index="6">
              <value>
                <![CDATA[Invalid email]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- sendOTPTest -->
        <test-method signature="sendOTPTest(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String)[pri:0, instance:com.api.testcases.TS_003_SendOTP@79da8dc5]" started-at="2020-05-19T13:28:55 WIB" name="sendOTPTest" data-provider="sendOTP-data" finished-at="2020-05-19T13:28:57 WIB" duration-ms="2094" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[TC_060]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[Test Send OTP API with invalid email (missing top level domain)]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[83833833834]]>
              </value>
            </param>
            <param index="3">
              <value>
                <![CDATA[yoginugrohoo@gmail]]>
              </value>
            </param>
            <param index="4">
              <value>
                <![CDATA[Fail]]>
              </value>
            </param>
            <param index="5">
              <value>
                <![CDATA[403]]>
              </value>
            </param>
            <param index="6">
              <value>
                <![CDATA[Invalid email]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- sendOTPTest -->
        <test-method signature="sendOTPTest(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String)[pri:0, instance:com.api.testcases.TS_003_SendOTP@79da8dc5]" started-at="2020-05-19T13:28:57 WIB" name="sendOTPTest" data-provider="sendOTP-data" finished-at="2020-05-19T13:28:58 WIB" duration-ms="1445" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[TC_061]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[Test Send OTP API with invalid email (recepient name missing)]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[83833833834]]>
              </value>
            </param>
            <param index="3">
              <value>
                <![CDATA[@gmail.com]]>
              </value>
            </param>
            <param index="4">
              <value>
                <![CDATA[Fail]]>
              </value>
            </param>
            <param index="5">
              <value>
                <![CDATA[403]]>
              </value>
            </param>
            <param index="6">
              <value>
                <![CDATA[Invalid email]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- sendOTPTest -->
        <test-method signature="sendOTPTest(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String)[pri:0, instance:com.api.testcases.TS_003_SendOTP@79da8dc5]" started-at="2020-05-19T13:28:58 WIB" name="sendOTPTest" data-provider="sendOTP-data" finished-at="2020-05-19T13:29:00 WIB" duration-ms="1491" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[TC_062]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[Test Send OTP API with invalid email (missing @ symbol)]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[83833833834]]>
              </value>
            </param>
            <param index="3">
              <value>
                <![CDATA[yoginugrohoogmail.com]]>
              </value>
            </param>
            <param index="4">
              <value>
                <![CDATA[Fail]]>
              </value>
            </param>
            <param index="5">
              <value>
                <![CDATA[403]]>
              </value>
            </param>
            <param index="6">
              <value>
                <![CDATA[Invalid email]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- sendOTPTest -->
        <test-method signature="sendOTPTest(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String)[pri:0, instance:com.api.testcases.TS_003_SendOTP@79da8dc5]" started-at="2020-05-19T13:29:00 WIB" name="sendOTPTest" data-provider="sendOTP-data" finished-at="2020-05-19T13:29:02 WIB" duration-ms="1658" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[TC_063]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[Test Send OTP API with invalid email (double @ symbol)]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[83833833834]]>
              </value>
            </param>
            <param index="3">
              <value>
                <![CDATA[yoginugrohoo@@gmail.com]]>
              </value>
            </param>
            <param index="4">
              <value>
                <![CDATA[Fail]]>
              </value>
            </param>
            <param index="5">
              <value>
                <![CDATA[403]]>
              </value>
            </param>
            <param index="6">
              <value>
                <![CDATA[Invalid email]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- sendOTPTest -->
        <test-method signature="sendOTPTest(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String)[pri:0, instance:com.api.testcases.TS_003_SendOTP@79da8dc5]" started-at="2020-05-19T13:29:02 WIB" name="sendOTPTest" data-provider="sendOTP-data" finished-at="2020-05-19T13:29:03 WIB" duration-ms="1444" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[TC_064]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[Test Send OTP API with invalid email (contain whitespace)]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[83833833834]]>
              </value>
            </param>
            <param index="3">
              <value>
                <![CDATA[yogi nugrohoo@gmail.com]]>
              </value>
            </param>
            <param index="4">
              <value>
                <![CDATA[Fail]]>
              </value>
            </param>
            <param index="5">
              <value>
                <![CDATA[403]]>
              </value>
            </param>
            <param index="6">
              <value>
                <![CDATA[Invalid email]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- sendOTPTest -->
        <test-method signature="sendOTPTest(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String)[pri:0, instance:com.api.testcases.TS_003_SendOTP@79da8dc5]" started-at="2020-05-19T13:29:03 WIB" name="sendOTPTest" data-provider="sendOTP-data" finished-at="2020-05-19T13:29:05 WIB" duration-ms="1589" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[TC_065]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[Test Send OTP API with invalid email (empty field)]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[83833833834]]>
              </value>
            </param>
            <param index="3">
              <value>
                <![CDATA[]]>
              </value>
            </param>
            <param index="4">
              <value>
                <![CDATA[Fail]]>
              </value>
            </param>
            <param index="5">
              <value>
                <![CDATA[403]]>
              </value>
            </param>
            <param index="6">
              <value>
                <![CDATA[Invalid email]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- sendOTPTest -->
      </class> <!-- com.api.testcases.TS_003_SendOTP -->
      <class name="com.api.testcases.CleanUpEverything">
        <test-method is-config="true" signature="setUp()[pri:0, instance:com.api.testcases.CleanUpEverything@4e7912d8]" started-at="2020-05-19T13:31:39 WIB" name="setUp" finished-at="2020-05-19T13:31:39 WIB" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method signature="cleanUp()[pri:0, instance:com.api.testcases.CleanUpEverything@4e7912d8]" started-at="2020-05-19T13:31:39 WIB" name="cleanUp" finished-at="2020-05-19T13:32:28 WIB" duration-ms="48483" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- cleanUp -->
      </class> <!-- com.api.testcases.CleanUpEverything -->
      <class name="com.api.testcases.TS_002_Login">
        <test-method is-config="true" signature="setUp()[pri:0, instance:com.api.testcases.TS_002_Login@c333c60]" started-at="2020-05-19T13:28:08 WIB" name="setUp" finished-at="2020-05-19T13:28:08 WIB" duration-ms="3" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method is-config="true" signature="firstLogMessage()[pri:0, instance:com.api.testcases.TS_002_Login@c333c60]" started-at="2020-05-19T13:28:08 WIB" name="firstLogMessage" finished-at="2020-05-19T13:28:09 WIB" duration-ms="1413" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- firstLogMessage -->
        <test-method signature="loginTest(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String)[pri:0, instance:com.api.testcases.TS_002_Login@c333c60]" started-at="2020-05-19T13:28:10 WIB" name="loginTest" data-provider="login-data" finished-at="2020-05-19T13:28:11 WIB" duration-ms="1562" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[TC_030]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[Test Login Account API with positive path (user exist, phone number true and password true)]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[83833833834]]>
              </value>
            </param>
            <param index="3">
              <value>
                <![CDATA[Password123@]]>
              </value>
            </param>
            <param index="4">
              <value>
                <![CDATA[Success]]>
              </value>
            </param>
            <param index="5">
              <value>
                <![CDATA[200]]>
              </value>
            </param>
            <param index="6">
              <value>
                <![CDATA[success]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- loginTest -->
        <test-method signature="loginTest(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String)[pri:0, instance:com.api.testcases.TS_002_Login@c333c60]" started-at="2020-05-19T13:28:11 WIB" name="loginTest" data-provider="login-data" finished-at="2020-05-19T13:28:13 WIB" duration-ms="1449" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[TC_031]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[Test Login Account API if user already login]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[83833833834]]>
              </value>
            </param>
            <param index="3">
              <value>
                <![CDATA[Password123@]]>
              </value>
            </param>
            <param index="4">
              <value>
                <![CDATA[Success]]>
              </value>
            </param>
            <param index="5">
              <value>
                <![CDATA[404]]>
              </value>
            </param>
            <param index="6">
              <value>
                <![CDATA[User is already logged in]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- loginTest -->
        <test-method signature="loginTest(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String)[pri:0, instance:com.api.testcases.TS_002_Login@c333c60]" started-at="2020-05-19T13:28:13 WIB" name="loginTest" data-provider="login-data" finished-at="2020-05-19T13:28:14 WIB" duration-ms="1504" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[TC_032]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[Test Login Account API if user exist,  phone number true but password false]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[83833833834]]>
              </value>
            </param>
            <param index="3">
              <value>
                <![CDATA[Password12@]]>
              </value>
            </param>
            <param index="4">
              <value>
                <![CDATA[Fail]]>
              </value>
            </param>
            <param index="5">
              <value>
                <![CDATA[403]]>
              </value>
            </param>
            <param index="6">
              <value>
                <![CDATA[Phone number or password wrong]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- loginTest -->
        <test-method signature="loginTest(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String)[pri:0, instance:com.api.testcases.TS_002_Login@c333c60]" started-at="2020-05-19T13:28:14 WIB" name="loginTest" data-provider="login-data" finished-at="2020-05-19T13:28:16 WIB" duration-ms="1433" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[TC_033]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[Test Login Account API if user exist,  phone number false but password true]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[83833833833]]>
              </value>
            </param>
            <param index="3">
              <value>
                <![CDATA[Password12@]]>
              </value>
            </param>
            <param index="4">
              <value>
                <![CDATA[Fail]]>
              </value>
            </param>
            <param index="5">
              <value>
                <![CDATA[403]]>
              </value>
            </param>
            <param index="6">
              <value>
                <![CDATA[Phone number or password wrong]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- loginTest -->
        <test-method signature="loginTest(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String)[pri:0, instance:com.api.testcases.TS_002_Login@c333c60]" started-at="2020-05-19T13:28:16 WIB" name="loginTest" data-provider="login-data" finished-at="2020-05-19T13:28:17 WIB" duration-ms="1541" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[TC_034]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[Test Login Account API if user not exist]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[83833833833]]>
              </value>
            </param>
            <param index="3">
              <value>
                <![CDATA[Password123@]]>
              </value>
            </param>
            <param index="4">
              <value>
                <![CDATA[Fail]]>
              </value>
            </param>
            <param index="5">
              <value>
                <![CDATA[403]]>
              </value>
            </param>
            <param index="6">
              <value>
                <![CDATA[Phone number or password wrong]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- loginTest -->
        <test-method signature="loginTest(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String)[pri:0, instance:com.api.testcases.TS_002_Login@c333c60]" started-at="2020-05-19T13:28:17 WIB" name="loginTest" data-provider="login-data" finished-at="2020-05-19T13:28:19 WIB" duration-ms="1510" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[TC_035]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[Test Login Account API with invalid phone number (less than 9 digit)]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[83833833]]>
              </value>
            </param>
            <param index="3">
              <value>
                <![CDATA[Password123@]]>
              </value>
            </param>
            <param index="4">
              <value>
                <![CDATA[Fail]]>
              </value>
            </param>
            <param index="5">
              <value>
                <![CDATA[403]]>
              </value>
            </param>
            <param index="6">
              <value>
                <![CDATA[Invalid phone number]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- loginTest -->
        <test-method signature="loginTest(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String)[pri:0, instance:com.api.testcases.TS_002_Login@c333c60]" started-at="2020-05-19T13:28:19 WIB" name="loginTest" data-provider="login-data" finished-at="2020-05-19T13:28:20 WIB" duration-ms="1470" status="FAIL">
          <params>
            <param index="0">
              <value>
                <![CDATA[TC_036]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[Test Login Account API with invalid phone number (more than 12 digit)]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[8383383383567]]>
              </value>
            </param>
            <param index="3">
              <value>
                <![CDATA[Password123@]]>
              </value>
            </param>
            <param index="4">
              <value>
                <![CDATA[Fail]]>
              </value>
            </param>
            <param index="5">
              <value>
                <![CDATA[403]]>
              </value>
            </param>
            <param index="6">
              <value>
                <![CDATA[Invalid phone number]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[1 expectation failed.
Response body doesn't match expectation.
Expected: a string containing "Invalid phone number"
  Actual: [data:[:], message:Phone number or password wrong, status:403]
]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: 1 expectation failed.
Response body doesn't match expectation.
Expected: a string containing "Invalid phone number"
  Actual: [data:[:], message:Phone number or password wrong, status:403]

at java.base/jdk.internal.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)
at java.base/jdk.internal.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62)
at java.base/jdk.internal.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
at java.base/java.lang.reflect.Constructor.newInstance(Constructor.java:490)
at org.codehaus.groovy.reflection.CachedConstructor.invoke(CachedConstructor.java:83)
at org.codehaus.groovy.reflection.CachedConstructor.doConstructorInvoke(CachedConstructor.java:77)
at org.codehaus.groovy.runtime.callsite.ConstructorSite$ConstructorSiteNoUnwrap.callConstructor(ConstructorSite.java:84)
at org.codehaus.groovy.runtime.callsite.AbstractCallSite.callConstructor(AbstractCallSite.java:250)
at io.restassured.internal.ResponseSpecificationImpl$HamcrestAssertionClosure.validate(ResponseSpecificationImpl.groovy:494)
at io.restassured.internal.ResponseSpecificationImpl$HamcrestAssertionClosure$validate$1.call(Unknown Source)
at io.restassured.internal.ResponseSpecificationImpl.validateResponseIfRequired(ResponseSpecificationImpl.groovy:656)
at jdk.internal.reflect.GeneratedMethodAccessor31.invoke(Unknown Source)
at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.base/java.lang.reflect.Method.invoke(Method.java:566)
at org.codehaus.groovy.runtime.callsite.PogoMetaMethodSite$PogoCachedMethodSiteNoUnwrapNoCoerce.invoke(PogoMetaMethodSite.java:210)
at org.codehaus.groovy.runtime.callsite.PogoMetaMethodSite.callCurrent(PogoMetaMethodSite.java:59)
at org.codehaus.groovy.runtime.callsite.AbstractCallSite.callCurrent(AbstractCallSite.java:169)
at io.restassured.internal.ResponseSpecificationImpl.content(ResponseSpecificationImpl.groovy:97)
at io.restassured.internal.ValidatableResponseOptionsImpl.content(ValidatableResponseOptionsImpl.java:89)
at com.api.testcases.TS_002_Login.loginTest(TS_002_Login.java:73)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.base/java.lang.reflect.Method.invoke(Method.java:566)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:134)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:597)
at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:173)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:816)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:146)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1540)
at org.testng.TestRunner.privateRun(TestRunner.java:766)
at org.testng.TestRunner.run(TestRunner.java:587)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:384)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:378)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:337)
at org.testng.SuiteRunner.run(SuiteRunner.java:286)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1187)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1109)
at org.testng.TestNG.runSuites(TestNG.java:1039)
at org.testng.TestNG.run(TestNG.java:1007)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- loginTest -->
        <test-method signature="loginTest(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String)[pri:0, instance:com.api.testcases.TS_002_Login@c333c60]" started-at="2020-05-19T13:28:20 WIB" name="loginTest" data-provider="login-data" finished-at="2020-05-19T13:28:22 WIB" duration-ms="2062" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[TC_037]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[Test Login Account API with invalid phone number (contain symbol)]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[@@@]]>
              </value>
            </param>
            <param index="3">
              <value>
                <![CDATA[Password123@]]>
              </value>
            </param>
            <param index="4">
              <value>
                <![CDATA[Fail]]>
              </value>
            </param>
            <param index="5">
              <value>
                <![CDATA[403]]>
              </value>
            </param>
            <param index="6">
              <value>
                <![CDATA[Invalid phone number]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- loginTest -->
        <test-method signature="loginTest(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String)[pri:0, instance:com.api.testcases.TS_002_Login@c333c60]" started-at="2020-05-19T13:28:22 WIB" name="loginTest" data-provider="login-data" finished-at="2020-05-19T13:28:24 WIB" duration-ms="1430" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[TC_038]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[Test Login Account API with invalid phone number (contain alphabet)]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[abc]]>
              </value>
            </param>
            <param index="3">
              <value>
                <![CDATA[Password123@]]>
              </value>
            </param>
            <param index="4">
              <value>
                <![CDATA[Fail]]>
              </value>
            </param>
            <param index="5">
              <value>
                <![CDATA[403]]>
              </value>
            </param>
            <param index="6">
              <value>
                <![CDATA[Invalid phone number]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- loginTest -->
        <test-method signature="loginTest(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String)[pri:0, instance:com.api.testcases.TS_002_Login@c333c60]" started-at="2020-05-19T13:28:24 WIB" name="loginTest" data-provider="login-data" finished-at="2020-05-19T13:28:25 WIB" duration-ms="1498" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[TC_039]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[Test Login Account API with invalid phone number (contain whitespace)]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[6283 833833835]]>
              </value>
            </param>
            <param index="3">
              <value>
                <![CDATA[Password123@]]>
              </value>
            </param>
            <param index="4">
              <value>
                <![CDATA[Fail]]>
              </value>
            </param>
            <param index="5">
              <value>
                <![CDATA[403]]>
              </value>
            </param>
            <param index="6">
              <value>
                <![CDATA[Invalid phone number]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- loginTest -->
        <test-method signature="loginTest(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String)[pri:0, instance:com.api.testcases.TS_002_Login@c333c60]" started-at="2020-05-19T13:28:25 WIB" name="loginTest" data-provider="login-data" finished-at="2020-05-19T13:28:26 WIB" duration-ms="1405" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[TC_040]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[Test Login Account API with invalid phone number (empty field)]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[]]>
              </value>
            </param>
            <param index="3">
              <value>
                <![CDATA[Password123@]]>
              </value>
            </param>
            <param index="4">
              <value>
                <![CDATA[Fail]]>
              </value>
            </param>
            <param index="5">
              <value>
                <![CDATA[403]]>
              </value>
            </param>
            <param index="6">
              <value>
                <![CDATA[Invalid phone number]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- loginTest -->
        <test-method signature="loginTest(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String)[pri:0, instance:com.api.testcases.TS_002_Login@c333c60]" started-at="2020-05-19T13:28:26 WIB" name="loginTest" data-provider="login-data" finished-at="2020-05-19T13:28:28 WIB" duration-ms="1466" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[TC_041]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[Test Login Account API with invalid password (less than 8 char)]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[83833833833]]>
              </value>
            </param>
            <param index="3">
              <value>
                <![CDATA[Passw2@]]>
              </value>
            </param>
            <param index="4">
              <value>
                <![CDATA[Fail]]>
              </value>
            </param>
            <param index="5">
              <value>
                <![CDATA[403]]>
              </value>
            </param>
            <param index="6">
              <value>
                <![CDATA[Invalid password]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- loginTest -->
        <test-method signature="loginTest(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String)[pri:0, instance:com.api.testcases.TS_002_Login@c333c60]" started-at="2020-05-19T13:28:28 WIB" name="loginTest" data-provider="login-data" finished-at="2020-05-19T13:28:29 WIB" duration-ms="1428" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[TC_042]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[Test Login Account API with invalid password (more than 20 char)]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[83833833833]]>
              </value>
            </param>
            <param index="3">
              <value>
                <![CDATA[Password123@Password1]]>
              </value>
            </param>
            <param index="4">
              <value>
                <![CDATA[Fail]]>
              </value>
            </param>
            <param index="5">
              <value>
                <![CDATA[403]]>
              </value>
            </param>
            <param index="6">
              <value>
                <![CDATA[Invalid password]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- loginTest -->
        <test-method signature="loginTest(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String)[pri:0, instance:com.api.testcases.TS_002_Login@c333c60]" started-at="2020-05-19T13:28:29 WIB" name="loginTest" data-provider="login-data" finished-at="2020-05-19T13:28:31 WIB" duration-ms="1419" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[TC_043]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[Test Login Account API with invalid password (no digit)]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[83833833833]]>
              </value>
            </param>
            <param index="3">
              <value>
                <![CDATA[Password@]]>
              </value>
            </param>
            <param index="4">
              <value>
                <![CDATA[Fail]]>
              </value>
            </param>
            <param index="5">
              <value>
                <![CDATA[403]]>
              </value>
            </param>
            <param index="6">
              <value>
                <![CDATA[Invalid password]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- loginTest -->
        <test-method signature="loginTest(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String)[pri:0, instance:com.api.testcases.TS_002_Login@c333c60]" started-at="2020-05-19T13:28:31 WIB" name="loginTest" data-provider="login-data" finished-at="2020-05-19T13:28:32 WIB" duration-ms="1526" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[TC_044]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[Test Login Account API with invalid password (no uppercase)]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[83833833833]]>
              </value>
            </param>
            <param index="3">
              <value>
                <![CDATA[password123@]]>
              </value>
            </param>
            <param index="4">
              <value>
                <![CDATA[Fail]]>
              </value>
            </param>
            <param index="5">
              <value>
                <![CDATA[403]]>
              </value>
            </param>
            <param index="6">
              <value>
                <![CDATA[Invalid password]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- loginTest -->
        <test-method signature="loginTest(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String)[pri:0, instance:com.api.testcases.TS_002_Login@c333c60]" started-at="2020-05-19T13:28:32 WIB" name="loginTest" data-provider="login-data" finished-at="2020-05-19T13:28:34 WIB" duration-ms="1456" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[TC_045]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[Test Login Account API with invalid password (no lowercase)]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[83833833833]]>
              </value>
            </param>
            <param index="3">
              <value>
                <![CDATA[PASSWORD123@]]>
              </value>
            </param>
            <param index="4">
              <value>
                <![CDATA[Fail]]>
              </value>
            </param>
            <param index="5">
              <value>
                <![CDATA[403]]>
              </value>
            </param>
            <param index="6">
              <value>
                <![CDATA[Invalid password]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- loginTest -->
        <test-method signature="loginTest(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String)[pri:0, instance:com.api.testcases.TS_002_Login@c333c60]" started-at="2020-05-19T13:28:34 WIB" name="loginTest" data-provider="login-data" finished-at="2020-05-19T13:28:35 WIB" duration-ms="1463" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[TC_046]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[Test Login Account API with invalid password (no symbol)]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[83833833833]]>
              </value>
            </param>
            <param index="3">
              <value>
                <![CDATA[Password123]]>
              </value>
            </param>
            <param index="4">
              <value>
                <![CDATA[Fail]]>
              </value>
            </param>
            <param index="5">
              <value>
                <![CDATA[403]]>
              </value>
            </param>
            <param index="6">
              <value>
                <![CDATA[Invalid password]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- loginTest -->
        <test-method signature="loginTest(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String)[pri:0, instance:com.api.testcases.TS_002_Login@c333c60]" started-at="2020-05-19T13:28:35 WIB" name="loginTest" data-provider="login-data" finished-at="2020-05-19T13:28:37 WIB" duration-ms="1435" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[TC_047]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[Test Login Account API with invalid password (contain whitespace)]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[83833833833]]>
              </value>
            </param>
            <param index="3">
              <value>
                <![CDATA[Password123 @]]>
              </value>
            </param>
            <param index="4">
              <value>
                <![CDATA[Fail]]>
              </value>
            </param>
            <param index="5">
              <value>
                <![CDATA[403]]>
              </value>
            </param>
            <param index="6">
              <value>
                <![CDATA[Invalid password]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- loginTest -->
        <test-method signature="loginTest(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String)[pri:0, instance:com.api.testcases.TS_002_Login@c333c60]" started-at="2020-05-19T13:28:37 WIB" name="loginTest" data-provider="login-data" finished-at="2020-05-19T13:28:38 WIB" duration-ms="1472" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[TC_048]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[Test Login Account API with invalid password (empty)]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[83833833833]]>
              </value>
            </param>
            <param index="3">
              <value>
                <![CDATA[]]>
              </value>
            </param>
            <param index="4">
              <value>
                <![CDATA[Fail]]>
              </value>
            </param>
            <param index="5">
              <value>
                <![CDATA[403]]>
              </value>
            </param>
            <param index="6">
              <value>
                <![CDATA[Invalid password]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- loginTest -->
      </class> <!-- com.api.testcases.TS_002_Login -->
      <class name="com.api.testcases.TS_005_GetUnpaidBill">
        <test-method is-config="true" signature="setUp()[pri:0, instance:com.api.testcases.TS_005_GetUnpaidBill@67080771]" started-at="2020-05-19T13:29:12 WIB" name="setUp" finished-at="2020-05-19T13:29:12 WIB" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method is-config="true" signature="firstLogMessage()[pri:0, instance:com.api.testcases.TS_005_GetUnpaidBill@67080771]" started-at="2020-05-19T13:29:12 WIB" name="firstLogMessage" finished-at="2020-05-19T13:29:12 WIB" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- firstLogMessage -->
        <test-method signature="createBillData(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String)[pri:0, instance:com.api.testcases.TS_005_GetUnpaidBill@67080771]" started-at="2020-05-19T13:29:12 WIB" name="createBillData" data-provider="createBill-data" finished-at="2020-05-19T13:29:14 WIB" duration-ms="1483" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[Wilson Fisk]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[02222222222]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[February]]>
              </value>
            </param>
            <param index="3">
              <value>
                <![CDATA[75000]]>
              </value>
            </param>
            <param index="4">
              <value>
                <![CDATA[paid]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- createBillData -->
        <test-method signature="createBillData(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String)[pri:0, instance:com.api.testcases.TS_005_GetUnpaidBill@67080771]" started-at="2020-05-19T13:29:14 WIB" name="createBillData" data-provider="createBill-data" finished-at="2020-05-19T13:29:15 WIB" duration-ms="1435" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[Mat Murdock]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[02233333333]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[February]]>
              </value>
            </param>
            <param index="3">
              <value>
                <![CDATA[75000]]>
              </value>
            </param>
            <param index="4">
              <value>
                <![CDATA[unpaid]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- createBillData -->
        <test-method signature="createBillData(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String)[pri:0, instance:com.api.testcases.TS_005_GetUnpaidBill@67080771]" started-at="2020-05-19T13:29:15 WIB" name="createBillData" data-provider="createBill-data" finished-at="2020-05-19T13:29:17 WIB" duration-ms="1462" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[Foggy Nelson]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[02244444444]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[February]]>
              </value>
            </param>
            <param index="3">
              <value>
                <![CDATA[75000]]>
              </value>
            </param>
            <param index="4">
              <value>
                <![CDATA[paid]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- createBillData -->
        <test-method signature="createBillData(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String)[pri:0, instance:com.api.testcases.TS_005_GetUnpaidBill@67080771]" started-at="2020-05-19T13:29:17 WIB" name="createBillData" data-provider="createBill-data" finished-at="2020-05-19T13:29:18 WIB" duration-ms="1449" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[Foggy Nelson]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[02244444444]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[March]]>
              </value>
            </param>
            <param index="3">
              <value>
                <![CDATA[75000]]>
              </value>
            </param>
            <param index="4">
              <value>
                <![CDATA[unpaid]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- createBillData -->
        <test-method signature="createBillData(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String)[pri:0, instance:com.api.testcases.TS_005_GetUnpaidBill@67080771]" started-at="2020-05-19T13:29:18 WIB" name="createBillData" data-provider="createBill-data" finished-at="2020-05-19T13:29:20 WIB" duration-ms="1429" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[Elektra Natchios]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[02255555555]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[February]]>
              </value>
            </param>
            <param index="3">
              <value>
                <![CDATA[75000]]>
              </value>
            </param>
            <param index="4">
              <value>
                <![CDATA[paid]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- createBillData -->
        <test-method signature="createBillData(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String)[pri:0, instance:com.api.testcases.TS_005_GetUnpaidBill@67080771]" started-at="2020-05-19T13:29:20 WIB" name="createBillData" data-provider="createBill-data" finished-at="2020-05-19T13:29:21 WIB" duration-ms="1518" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[Elektra Natchios]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[02255555555]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[March]]>
              </value>
            </param>
            <param index="3">
              <value>
                <![CDATA[75000]]>
              </value>
            </param>
            <param index="4">
              <value>
                <![CDATA[paid]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- createBillData -->
        <test-method signature="createBillData(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String)[pri:0, instance:com.api.testcases.TS_005_GetUnpaidBill@67080771]" started-at="2020-05-19T13:29:21 WIB" name="createBillData" data-provider="createBill-data" finished-at="2020-05-19T13:29:23 WIB" duration-ms="1460" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[Karen Page]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[02266666666]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[February]]>
              </value>
            </param>
            <param index="3">
              <value>
                <![CDATA[75000]]>
              </value>
            </param>
            <param index="4">
              <value>
                <![CDATA[paid]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- createBillData -->
        <test-method signature="createBillData(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String)[pri:0, instance:com.api.testcases.TS_005_GetUnpaidBill@67080771]" started-at="2020-05-19T13:29:23 WIB" name="createBillData" data-provider="createBill-data" finished-at="2020-05-19T13:29:24 WIB" duration-ms="1546" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[Karen Page]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[02266666666]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[March]]>
              </value>
            </param>
            <param index="3">
              <value>
                <![CDATA[75000]]>
              </value>
            </param>
            <param index="4">
              <value>
                <![CDATA[paid]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- createBillData -->
        <test-method signature="createBillData(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String)[pri:0, instance:com.api.testcases.TS_005_GetUnpaidBill@67080771]" started-at="2020-05-19T13:29:24 WIB" name="createBillData" data-provider="createBill-data" finished-at="2020-05-19T13:29:26 WIB" duration-ms="1474" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[Karen Page]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[02266666666]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[April]]>
              </value>
            </param>
            <param index="3">
              <value>
                <![CDATA[75000]]>
              </value>
            </param>
            <param index="4">
              <value>
                <![CDATA[unpaid]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- createBillData -->
        <test-method signature="createBillData(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String)[pri:0, instance:com.api.testcases.TS_005_GetUnpaidBill@67080771]" started-at="2020-05-19T13:29:26 WIB" name="createBillData" data-provider="createBill-data" finished-at="2020-05-19T13:29:27 WIB" duration-ms="1735" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[Greyson Ace]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[02277777777]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[February]]>
              </value>
            </param>
            <param index="3">
              <value>
                <![CDATA[75000]]>
              </value>
            </param>
            <param index="4">
              <value>
                <![CDATA[paid]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- createBillData -->
        <test-method signature="createBillData(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String)[pri:0, instance:com.api.testcases.TS_005_GetUnpaidBill@67080771]" started-at="2020-05-19T13:29:27 WIB" name="createBillData" data-provider="createBill-data" finished-at="2020-05-19T13:29:29 WIB" duration-ms="1505" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[Greyson Ace]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[02277777777]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[March]]>
              </value>
            </param>
            <param index="3">
              <value>
                <![CDATA[75000]]>
              </value>
            </param>
            <param index="4">
              <value>
                <![CDATA[paid]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- createBillData -->
        <test-method signature="createBillData(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String)[pri:0, instance:com.api.testcases.TS_005_GetUnpaidBill@67080771]" started-at="2020-05-19T13:29:29 WIB" name="createBillData" data-provider="createBill-data" finished-at="2020-05-19T13:29:30 WIB" duration-ms="1646" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[Greyson Ace]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[0227777777]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[April]]>
              </value>
            </param>
            <param index="3">
              <value>
                <![CDATA[75000]]>
              </value>
            </param>
            <param index="4">
              <value>
                <![CDATA[unpaid]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- createBillData -->
        <test-method signature="createBillData(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String)[pri:0, instance:com.api.testcases.TS_005_GetUnpaidBill@67080771]" started-at="2020-05-19T13:29:30 WIB" name="createBillData" data-provider="createBill-data" finished-at="2020-05-19T13:29:32 WIB" duration-ms="1525" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[Greyson Ace]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[02277777777]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[May]]>
              </value>
            </param>
            <param index="3">
              <value>
                <![CDATA[75000]]>
              </value>
            </param>
            <param index="4">
              <value>
                <![CDATA[unpaid]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- createBillData -->
        <test-method signature="getUnpaidBillTest(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String)[pri:0, instance:com.api.testcases.TS_005_GetUnpaidBill@67080771]" started-at="2020-05-19T13:29:32 WIB" name="getUnpaidBillTest" data-provider="getUnpaidBill-data" finished-at="2020-05-19T13:29:34 WIB" depends-on-methods="com.api.testcases.TS_005_GetUnpaidBill.createBillData" duration-ms="1495" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[TS_071]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[Test Get Telephone Bills API with positive test path (Registered Phone Number, have billing)]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[02233333333]]>
              </value>
            </param>
            <param index="3">
              <value>
                <![CDATA[Bill Sent]]>
              </value>
            </param>
            <param index="4">
              <value>
                <![CDATA[200]]>
              </value>
            </param>
            <param index="5">
              <value>
                <![CDATA[Bill has successfully sent]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getUnpaidBillTest -->
        <test-method signature="getUnpaidBillTest(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String)[pri:0, instance:com.api.testcases.TS_005_GetUnpaidBill@67080771]" started-at="2020-05-19T13:29:34 WIB" name="getUnpaidBillTest" data-provider="getUnpaidBill-data" finished-at="2020-05-19T13:29:35 WIB" depends-on-methods="com.api.testcases.TS_005_GetUnpaidBill.createBillData" duration-ms="1493" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[TS_072]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[Test Get Telephone Bills API with positive test path (Registered Phone Number, 1 paid billing, 1 unpaid billing)]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[02244444444]]>
              </value>
            </param>
            <param index="3">
              <value>
                <![CDATA[Bill Sent]]>
              </value>
            </param>
            <param index="4">
              <value>
                <![CDATA[200]]>
              </value>
            </param>
            <param index="5">
              <value>
                <![CDATA[Bill has successfully sent]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getUnpaidBillTest -->
        <test-method signature="getUnpaidBillTest(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String)[pri:0, instance:com.api.testcases.TS_005_GetUnpaidBill@67080771]" started-at="2020-05-19T13:29:35 WIB" name="getUnpaidBillTest" data-provider="getUnpaidBill-data" finished-at="2020-05-19T13:29:37 WIB" depends-on-methods="com.api.testcases.TS_005_GetUnpaidBill.createBillData" duration-ms="1435" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[TS_073]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[Test Get Telephone Bills API with positive test path (Registered Phone Number, 2 paid billing, 1 unpaid billing)]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[02266666666]]>
              </value>
            </param>
            <param index="3">
              <value>
                <![CDATA[Bill Sent]]>
              </value>
            </param>
            <param index="4">
              <value>
                <![CDATA[200]]>
              </value>
            </param>
            <param index="5">
              <value>
                <![CDATA[Bill has successfully sent]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getUnpaidBillTest -->
        <test-method signature="getUnpaidBillTest(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String)[pri:0, instance:com.api.testcases.TS_005_GetUnpaidBill@67080771]" started-at="2020-05-19T13:29:37 WIB" name="getUnpaidBillTest" data-provider="getUnpaidBill-data" finished-at="2020-05-19T13:29:38 WIB" depends-on-methods="com.api.testcases.TS_005_GetUnpaidBill.createBillData" duration-ms="1458" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[TS_074]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[Test Get Telephone Bills API with positive test path (Registered Phone Number, 2 paid billing, 2 unpaid billing)]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[02277777777]]>
              </value>
            </param>
            <param index="3">
              <value>
                <![CDATA[Bill Sent]]>
              </value>
            </param>
            <param index="4">
              <value>
                <![CDATA[200]]>
              </value>
            </param>
            <param index="5">
              <value>
                <![CDATA[Bill has successfully sent]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getUnpaidBillTest -->
        <test-method signature="getUnpaidBillTest(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String)[pri:0, instance:com.api.testcases.TS_005_GetUnpaidBill@67080771]" started-at="2020-05-19T13:29:38 WIB" name="getUnpaidBillTest" data-provider="getUnpaidBill-data" finished-at="2020-05-19T13:29:40 WIB" depends-on-methods="com.api.testcases.TS_005_GetUnpaidBill.createBillData" duration-ms="1410" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[TS_075]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[Test Get Telephone Bills API with negative test (valid data, phone number not registered)]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[02211111111]]>
              </value>
            </param>
            <param index="3">
              <value>
                <![CDATA[Not Found]]>
              </value>
            </param>
            <param index="4">
              <value>
                <![CDATA[404]]>
              </value>
            </param>
            <param index="5">
              <value>
                <![CDATA[Bill not found]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getUnpaidBillTest -->
        <test-method signature="getUnpaidBillTest(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String)[pri:0, instance:com.api.testcases.TS_005_GetUnpaidBill@67080771]" started-at="2020-05-19T13:29:40 WIB" name="getUnpaidBillTest" data-provider="getUnpaidBill-data" finished-at="2020-05-19T13:29:41 WIB" depends-on-methods="com.api.testcases.TS_005_GetUnpaidBill.createBillData" duration-ms="1428" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[TS_076]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[Test Get Telephone Bills API with negative test (valid data, phone number registered but no billing)]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[02222222222]]>
              </value>
            </param>
            <param index="3">
              <value>
                <![CDATA[Not Found]]>
              </value>
            </param>
            <param index="4">
              <value>
                <![CDATA[404]]>
              </value>
            </param>
            <param index="5">
              <value>
                <![CDATA[Bill not found]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getUnpaidBillTest -->
        <test-method signature="getUnpaidBillTest(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String)[pri:0, instance:com.api.testcases.TS_005_GetUnpaidBill@67080771]" started-at="2020-05-19T13:29:41 WIB" name="getUnpaidBillTest" data-provider="getUnpaidBill-data" finished-at="2020-05-19T13:29:42 WIB" depends-on-methods="com.api.testcases.TS_005_GetUnpaidBill.createBillData" duration-ms="1398" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[TS_077]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[Test Get Telephone Bills API with negative test (Registered Phone Number, 2 paid billing, 0 unpaid billing)]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[02255555555]]>
              </value>
            </param>
            <param index="3">
              <value>
                <![CDATA[Not Found]]>
              </value>
            </param>
            <param index="4">
              <value>
                <![CDATA[404]]>
              </value>
            </param>
            <param index="5">
              <value>
                <![CDATA[Bill not found]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getUnpaidBillTest -->
        <test-method signature="getUnpaidBillTest(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String)[pri:0, instance:com.api.testcases.TS_005_GetUnpaidBill@67080771]" started-at="2020-05-19T13:29:42 WIB" name="getUnpaidBillTest" data-provider="getUnpaidBill-data" finished-at="2020-05-19T13:29:44 WIB" depends-on-methods="com.api.testcases.TS_005_GetUnpaidBill.createBillData" duration-ms="1407" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[TS_078]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[Test Get Telephone Bills API with invalid phone number (less than 8 digit)]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[0227777]]>
              </value>
            </param>
            <param index="3">
              <value>
                <![CDATA[Fail get bills]]>
              </value>
            </param>
            <param index="4">
              <value>
                <![CDATA[403]]>
              </value>
            </param>
            <param index="5">
              <value>
                <![CDATA[Invalid phone number]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getUnpaidBillTest -->
        <test-method signature="getUnpaidBillTest(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String)[pri:0, instance:com.api.testcases.TS_005_GetUnpaidBill@67080771]" started-at="2020-05-19T13:29:44 WIB" name="getUnpaidBillTest" data-provider="getUnpaidBill-data" finished-at="2020-05-19T13:29:45 WIB" depends-on-methods="com.api.testcases.TS_005_GetUnpaidBill.createBillData" duration-ms="1412" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[TS_079]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[Test Get Telephone Bills API with invalid phone number (more than than 13 digit)]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[02277777777777]]>
              </value>
            </param>
            <param index="3">
              <value>
                <![CDATA[Fail get bills]]>
              </value>
            </param>
            <param index="4">
              <value>
                <![CDATA[403]]>
              </value>
            </param>
            <param index="5">
              <value>
                <![CDATA[Invalid phone number]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getUnpaidBillTest -->
        <test-method signature="getUnpaidBillTest(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String)[pri:0, instance:com.api.testcases.TS_005_GetUnpaidBill@67080771]" started-at="2020-05-19T13:29:45 WIB" name="getUnpaidBillTest" data-provider="getUnpaidBill-data" finished-at="2020-05-19T13:29:47 WIB" depends-on-methods="com.api.testcases.TS_005_GetUnpaidBill.createBillData" duration-ms="1433" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[TS_081]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[Test Get Telephone Bills API with invalid phone number (contain symbol)]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[021758678577@]]>
              </value>
            </param>
            <param index="3">
              <value>
                <![CDATA[Fail get bills]]>
              </value>
            </param>
            <param index="4">
              <value>
                <![CDATA[403]]>
              </value>
            </param>
            <param index="5">
              <value>
                <![CDATA[Invalid phone number]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getUnpaidBillTest -->
        <test-method signature="getUnpaidBillTest(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String)[pri:0, instance:com.api.testcases.TS_005_GetUnpaidBill@67080771]" started-at="2020-05-19T13:29:47 WIB" name="getUnpaidBillTest" data-provider="getUnpaidBill-data" finished-at="2020-05-19T13:29:48 WIB" depends-on-methods="com.api.testcases.TS_005_GetUnpaidBill.createBillData" duration-ms="1506" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[TS_082]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[Test Get Telephone Bills API with invalid phone number (contain alphabet)]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[021758678577a]]>
              </value>
            </param>
            <param index="3">
              <value>
                <![CDATA[Fail get bills]]>
              </value>
            </param>
            <param index="4">
              <value>
                <![CDATA[403]]>
              </value>
            </param>
            <param index="5">
              <value>
                <![CDATA[Invalid phone number]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getUnpaidBillTest -->
        <test-method signature="getUnpaidBillTest(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String)[pri:0, instance:com.api.testcases.TS_005_GetUnpaidBill@67080771]" started-at="2020-05-19T13:29:48 WIB" name="getUnpaidBillTest" data-provider="getUnpaidBill-data" finished-at="2020-05-19T13:29:50 WIB" depends-on-methods="com.api.testcases.TS_005_GetUnpaidBill.createBillData" duration-ms="1447" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[TS_080]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[Test Get Telephone Bills API with invalid phone number (contain whitespace)]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[02175867 8577]]>
              </value>
            </param>
            <param index="3">
              <value>
                <![CDATA[Fail get bills]]>
              </value>
            </param>
            <param index="4">
              <value>
                <![CDATA[403]]>
              </value>
            </param>
            <param index="5">
              <value>
                <![CDATA[Invalid phone number]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getUnpaidBillTest -->
        <test-method signature="getUnpaidBillTest(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String)[pri:0, instance:com.api.testcases.TS_005_GetUnpaidBill@67080771]" started-at="2020-05-19T13:29:50 WIB" name="getUnpaidBillTest" data-provider="getUnpaidBill-data" finished-at="2020-05-19T13:29:51 WIB" depends-on-methods="com.api.testcases.TS_005_GetUnpaidBill.createBillData" duration-ms="1440" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[TS_083]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[Test Get Telephone Bills API with invalid phone number (empty)]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[]]>
              </value>
            </param>
            <param index="3">
              <value>
                <![CDATA[Fail get bills]]>
              </value>
            </param>
            <param index="4">
              <value>
                <![CDATA[403]]>
              </value>
            </param>
            <param index="5">
              <value>
                <![CDATA[Invalid phone number]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getUnpaidBillTest -->
      </class> <!-- com.api.testcases.TS_005_GetUnpaidBill -->
      <class name="com.api.testcases.TS_004_GetUserProfile">
        <test-method is-config="true" signature="setUp()[pri:0, instance:com.api.testcases.TS_004_GetUserProfile@1eb5174b]" started-at="2020-05-19T13:29:05 WIB" name="setUp" finished-at="2020-05-19T13:29:05 WIB" duration-ms="2" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method is-config="true" signature="firstLogMessage()[pri:0, instance:com.api.testcases.TS_004_GetUserProfile@1eb5174b]" started-at="2020-05-19T13:29:05 WIB" name="firstLogMessage" finished-at="2020-05-19T13:29:05 WIB" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- firstLogMessage -->
        <test-method signature="getProfileTest(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String)[pri:0, instance:com.api.testcases.TS_004_GetUserProfile@1eb5174b]" started-at="2020-05-19T13:29:05 WIB" name="getProfileTest" data-provider="getUserProfile-data" finished-at="2020-05-19T13:29:06 WIB" duration-ms="1595" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[TC_066]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[Test Get User Profile API if user exist]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[Depend#83833833834]]>
              </value>
            </param>
            <param index="3">
              <value>
                <![CDATA[Success]]>
              </value>
            </param>
            <param index="4">
              <value>
                <![CDATA[200]]>
              </value>
            </param>
            <param index="5">
              <value>
                <![CDATA[User profile has successfully sent]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getProfileTest -->
        <test-method signature="getProfileTest(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String)[pri:0, instance:com.api.testcases.TS_004_GetUserProfile@1eb5174b]" started-at="2020-05-19T13:29:06 WIB" name="getProfileTest" data-provider="getUserProfile-data" finished-at="2020-05-19T13:29:08 WIB" duration-ms="1425" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[TC_067]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[Test Get User Profile API if user not exist]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[1000]]>
              </value>
            </param>
            <param index="3">
              <value>
                <![CDATA[Fail]]>
              </value>
            </param>
            <param index="4">
              <value>
                <![CDATA[404]]>
              </value>
            </param>
            <param index="5">
              <value>
                <![CDATA[User not found]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getProfileTest -->
        <test-method signature="getProfileTest(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String)[pri:0, instance:com.api.testcases.TS_004_GetUserProfile@1eb5174b]" started-at="2020-05-19T13:29:08 WIB" name="getProfileTest" data-provider="getUserProfile-data" finished-at="2020-05-19T13:29:09 WIB" duration-ms="1534" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[TC_068]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[Test Get User Profile API with invalid user id (contain alphabet)]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[a]]>
              </value>
            </param>
            <param index="3">
              <value>
                <![CDATA[Fail]]>
              </value>
            </param>
            <param index="4">
              <value>
                <![CDATA[400]]>
              </value>
            </param>
            <param index="5">
              <value>
                <![CDATA[JSON parse error]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getProfileTest -->
        <test-method signature="getProfileTest(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String)[pri:0, instance:com.api.testcases.TS_004_GetUserProfile@1eb5174b]" started-at="2020-05-19T13:29:09 WIB" name="getProfileTest" data-provider="getUserProfile-data" finished-at="2020-05-19T13:29:11 WIB" duration-ms="1409" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[TC_069]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[Test Get User Profile API with invalid user id (contain symbol)]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[@]]>
              </value>
            </param>
            <param index="3">
              <value>
                <![CDATA[Fail]]>
              </value>
            </param>
            <param index="4">
              <value>
                <![CDATA[400]]>
              </value>
            </param>
            <param index="5">
              <value>
                <![CDATA[JSON parse error]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getProfileTest -->
        <test-method signature="getProfileTest(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String)[pri:0, instance:com.api.testcases.TS_004_GetUserProfile@1eb5174b]" started-at="2020-05-19T13:29:11 WIB" name="getProfileTest" data-provider="getUserProfile-data" finished-at="2020-05-19T13:29:12 WIB" duration-ms="1437" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[TC_070]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[Test Get User Profile API with invalid user id (empty)]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[]]>
              </value>
            </param>
            <param index="3">
              <value>
                <![CDATA[Fail]]>
              </value>
            </param>
            <param index="4">
              <value>
                <![CDATA[404]]>
              </value>
            </param>
            <param index="5">
              <value>
                <![CDATA[User not found]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getProfileTest -->
      </class> <!-- com.api.testcases.TS_004_GetUserProfile -->
    </test> <!-- APITest -->
  </suite> <!-- APISuite -->
</testng-results>
